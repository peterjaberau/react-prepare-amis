{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "OracleConnection",
  "description": "Oracle Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.OracleConnection",
  "definitions": {
    "oracleType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Oracle"
      ],
      "default": "Oracle"
    },
    "oracleScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": [
        "oracle+cx_oracle"
      ],
      "default": "oracle+cx_oracle"
    },
    "OracleDatabaseSchema": {
      "title": "Database Schema",
      "type": "object",
      "properties": {
        "databaseSchema": {
          "title": "DatabaseSchema",
          "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
          "type": "string"
        }
      },
      "required": [
        "databaseSchema"
      ]
    },
    "OracleServiceName": {
      "title": "Oracle Service Name",
      "type": "object",
      "properties": {
        "oracleServiceName": {
          "title": "Oracle Service Name",
          "description": "The Oracle Service name is the TNS alias that you give when you remotely connect to your database.",
          "type": "string"
        }
      },
      "required": [
        "oracleServiceName"
      ]
    },
    "OracleTNSConnection": {
      "title": "Oracle TNS Connection",
      "type": "object",
      "properties": {
        "oracleTNSConnection": {
          "title": "Oracle TNS Connection String",
          "description": "Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).",
          "type": "string"
        }
      },
      "required": [
        "oracleTNSConnection"
      ]
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "default": "Oracle",
      "type": "string",
      "enum": [
        "Oracle"
      ]
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "default": "oracle+cx_oracle",
      "type": "string",
      "enum": [
        "oracle+cx_oracle"
      ]
    },
    "username": {
      "title": "Username",
      "description": "Username to connect to Oracle. This user should have privileges to read all the metadata in Oracle.",
      "type": "string"
    },
    "password": {
      "title": "Password",
      "description": "Password to connect to Oracle.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "Host and port of the Oracle service.",
      "type": "string"
    },
    "oracleConnectionType": {
      "title": "Oracle Connection Type",
      "type": "object",
      "description": "Connect with oracle by either passing service name or database schema name.",
      "oneOf": [
        {
          "title": "Database Schema",
          "type": "object",
          "properties": {
            "databaseSchema": {
              "title": "DatabaseSchema",
              "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
              "type": "string"
            }
          },
          "required": [
            "databaseSchema"
          ]
        },
        {
          "title": "Oracle Service Name",
          "type": "object",
          "properties": {
            "oracleServiceName": {
              "title": "Oracle Service Name",
              "description": "The Oracle Service name is the TNS alias that you give when you remotely connect to your database.",
              "type": "string"
            }
          },
          "required": [
            "oracleServiceName"
          ]
        },
        {
          "title": "Oracle TNS Connection",
          "type": "object",
          "properties": {
            "oracleTNSConnection": {
              "title": "Oracle TNS Connection String",
              "description": "Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).",
              "type": "string"
            }
          },
          "required": [
            "oracleTNSConnection"
          ]
        }
      ]
    },
    "instantClientDirectory": {
      "title": "Oracle instant client directory",
      "type": "string",
      "description": "This directory will be used to set the LD_LIBRARY_PATH env variable. It is required if you need to enable thick connection mode. By default, we bring instant client 19 and point to /instantclient.",
      "default": "/instantclient"
    },
    "databaseName": {
      "title": "Database Name",
      "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
      "type": "string"
    },
    "connectionOptions": {
      "title": "Connection Options",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "schemaFilterPattern": {
      "title": "Default Schema Filter Pattern",
      "description": "Regex to only include/exclude schemas that matches the pattern.",
      "type": "object",
      "properties": {
        "includes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "^sys$",
            "^ctxsys$",
            "^dbsnmp$",
            "^outln$"
          ]
        }
      }
    },
    "tableFilterPattern": {
      "title": "Default Table Filter Pattern",
      "description": "Regex to only include/exclude tables that matches the pattern.",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "databaseFilterPattern": {
      "title": "Default Database Filter Pattern",
      "description": "Regex to only include/exclude databases that matches the pattern.",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsUsageExtraction": {
      "description": "Supports Usage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsLineageExtraction": {
      "description": "Supports Lineage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsDBTExtraction": {
      "description": "Supports DBT Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "description": "Supports Profiler",
      "type": "boolean",
      "default": true
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
      "type": "boolean",
      "default": true
    },
    "supportsDataDiff": {
      "title": "Supports Data Diff Extraction.",
      "description": "Supports the data diff data qualty specification.",
      "type": "boolean",
      "default": true
    },
    "sampleDataStorageConfig": {
      "title": "Storage Config for Sample Data",
      "description": "Storage config to store sample data",
      "type": "object",
      "javaType": "org.openmetadata.schema.services.connections.database.SampleDataStorageConfig",
      "properties": {
        "config": {
          "oneOf": [
            {
              "title": "Sample Data Storage Config",
              "description": "Storage config to store sample data",
              "type": "object",
              "properties": {
                "bucketName": {
                  "title": "Bucket Name",
                  "description": "Bucket Name",
                  "type": "string",
                  "default": ""
                },
                "prefix": {
                  "title": "Prefix",
                  "description": "Prefix of the data source.",
                  "type": "string",
                  "default": ""
                },
                "filePathPattern": {
                  "title": "File Path Pattern",
                  "description": "Provide the pattern of the path where the generated sample data file needs to be stored.",
                  "type": "string",
                  "default": "{service_name}/{database_name}/{database_schema_name}/{table_name}/sample_data.parquet"
                },
                "overwriteData": {
                  "title": "Overwrite Sample Data",
                  "description": "When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day",
                  "type": "boolean",
                  "default": true
                },
                "storageConfig": {
                  "oneOf": [
                    {
                      "title": "AWS S3 Storage Config",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    },
                    {
                      "title": "OpenMetadata Storage",
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            },
            {
              "title": "No Sample Data Storage Config",
              "type": "object",
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": [
    "username",
    "oracleConnectionType"
  ]
}