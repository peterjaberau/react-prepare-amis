{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AlationConnection",
  "description": "Alation Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.metadata.AlationConnection",
  "definitions": {
    "alationType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "Alation"
      ],
      "default": "Alation"
    }
  },
  "properties": {
    "type": {
      "description": "Service Type",
      "default": "Alation",
      "type": "string",
      "enum": [
        "Alation"
      ]
    },
    "hostPort": {
      "description": "Host and port of the Alation service.",
      "title": "Host and Port",
      "type": "string",
      "format": "uri",
      "expose": true
    },
    "authType": {
      "mask": true,
      "title": "Authentication type for Alation",
      "description": "Types of methods used to authenticate to the alation instance",
      "oneOf": [
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "BasicAuth",
          "description": "Basic Auth Credentials",
          "type": "object",
          "javaType": "org.openmetadata.schema.security.credentials.BasicAuth",
          "properties": {
            "username": {
              "title": "Username",
              "description": "Username to access the service.",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "description": "Password to access the service.",
              "type": "string",
              "format": "password"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "additionalProperties": false
        },
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "ApiAccessTokenAuth",
          "description": "API Access Token Auth Credentials",
          "type": "object",
          "javaType": "org.openmetadata.schema.security.credentials.ApiAccessTokenAuth",
          "properties": {
            "accessToken": {
              "title": "Access Token",
              "description": "Access Token for the API",
              "type": "string",
              "format": "password"
            }
          },
          "required": [
            "accessToken"
          ],
          "additionalProperties": false
        }
      ]
    },
    "connection": {
      "title": "Alation Database Connection",
      "description": "Choose between mysql and postgres connection for alation database",
      "oneOf": [
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "PostgresConnection",
          "description": "Postgres Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
          "definitions": {
            "postgresType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Postgres"
              ],
              "default": "Postgres"
            },
            "postgresScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "postgresql+psycopg2",
                "pgspider+psycopg2"
              ],
              "default": "postgresql+psycopg2"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Postgres",
              "type": "string",
              "enum": [
                "Postgres"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "postgresql+psycopg2",
              "type": "string",
              "enum": [
                "postgresql+psycopg2",
                "pgspider+psycopg2"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.",
              "type": "string"
            },
            "authType": {
              "title": "Auth Configuration Type",
              "description": "Choose Auth Config Type.",
              "mask": true,
              "oneOf": [
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Basic Auth",
                  "description": "Common Database Connection Config",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                  "type": "object",
                  "properties": {
                    "password": {
                      "title": "Password",
                      "description": "Password to connect to source.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "IAM Auth Configuration Source",
                  "description": "IAM Auth Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                  "properties": {
                    "awsConfig": {
                      "title": "AWS Credentials Configuration",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Azure Configuration Source",
                  "description": "Azure Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.AzureConfig",
                  "properties": {
                    "azureConfig": {
                      "title": "Azure Credentials Configuration",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "Azure Cloud Credentials",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
                      "properties": {
                        "clientId": {
                          "title": "Client ID",
                          "description": "Your Service Principal App ID (Client ID)",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "Your Service Principal Password (Client Secret)",
                          "type": "string",
                          "format": "password"
                        },
                        "tenantId": {
                          "title": "Tenant ID",
                          "description": "Tenant ID of your Azure Subscription",
                          "type": "string"
                        },
                        "accountName": {
                          "title": "Storage Account Name",
                          "description": "Account Name of your storage account",
                          "type": "string"
                        },
                        "vaultName": {
                          "title": "Key Vault Name",
                          "description": "Key Vault Name",
                          "type": "string"
                        },
                        "scopes": {
                          "title": "Scopes",
                          "description": "Scopes to get access token, for e.g. api://6dfX33ab-XXXX-49df-XXXX-3459eX817d3e/.default",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the source service.",
              "type": "string"
            },
            "database": {
              "title": "Database",
              "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
              "type": "string"
            },
            "ingestAllDatabases": {
              "title": "Ingest All Databases",
              "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
              "type": "boolean",
              "default": false
            },
            "schemaFilterPattern": {
              "title": "Default Schema Filter Pattern",
              "description": "Regex to only include/exclude schemas that matches the pattern.",
              "type": "object",
              "properties": {
                "includes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [
                    "^information_schema$"
                  ]
                }
              }
            },
            "tableFilterPattern": {
              "title": "Default Table Filter Pattern",
              "description": "Regex to only include/exclude tables that matches the pattern.",
              "type": "object",
              "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
              "properties": {
                "includes": {
                  "description": "List of strings/regex patterns to match and include only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "description": "List of strings/regex patterns to match and exclude only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                }
              },
              "additionalProperties": false
            },
            "databaseFilterPattern": {
              "title": "Default Database Filter Pattern",
              "description": "Regex to only include/exclude databases that matches the pattern.",
              "type": "object",
              "properties": {
                "includes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [
                    "^template1$",
                    "^template0$"
                  ]
                }
              }
            },
            "sslMode": {
              "title": "SSL Mode",
              "description": "SSL Mode to connect to database.",
              "javaType": "org.openmetadata.schema.security.ssl.SSLMode",
              "enum": [
                "disable",
                "allow",
                "prefer",
                "require",
                "verify-ca",
                "verify-full"
              ],
              "default": "disable"
            },
            "sslConfig": {
              "title": "SSL Config",
              "description": "Client SSL configuration",
              "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
              "mask": true,
              "oneOf": [
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Validate SSL Client Config",
                  "description": "OpenMetadata Client configured to validate SSL certificates.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
                  "additionalProperties": false,
                  "properties": {
                    "caCertificate": {
                      "title": "CA Certificate",
                      "description": "The CA certificate used for SSL validation.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    },
                    "sslCertificate": {
                      "title": "SSL Certificate",
                      "description": "The SSL certificate used for client authentication.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    },
                    "sslKey": {
                      "title": "SSL Key",
                      "description": "The private key associated with the SSL certificate.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    }
                  }
                }
              ]
            },
            "classificationName": {
              "title": "Classification Name",
              "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
              "type": "string",
              "default": "PostgresPolicyTags"
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsUsageExtraction": {
              "description": "Supports Usage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsLineageExtraction": {
              "description": "Supports Lineage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsDatabase": {
              "title": "Supports Database",
              "description": "The source service supports the database concept in its hierarchy",
              "type": "boolean",
              "default": true
            },
            "supportsQueryComment": {
              "title": "Supports Query Comment",
              "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
              "type": "boolean",
              "default": true
            },
            "sampleDataStorageConfig": {
              "title": "Storage Config for Sample Data",
              "description": "Storage config to store sample data",
              "type": "object",
              "javaType": "org.openmetadata.schema.services.connections.database.SampleDataStorageConfig",
              "properties": {
                "config": {
                  "oneOf": [
                    {
                      "title": "Sample Data Storage Config",
                      "description": "Storage config to store sample data",
                      "type": "object",
                      "properties": {
                        "bucketName": {
                          "title": "Bucket Name",
                          "description": "Bucket Name",
                          "type": "string",
                          "default": ""
                        },
                        "prefix": {
                          "title": "Prefix",
                          "description": "Prefix of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "filePathPattern": {
                          "title": "File Path Pattern",
                          "description": "Provide the pattern of the path where the generated sample data file needs to be stored.",
                          "type": "string",
                          "default": "{service_name}/{database_name}/{database_schema_name}/{table_name}/sample_data.parquet"
                        },
                        "overwriteData": {
                          "title": "Overwrite Sample Data",
                          "description": "When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day",
                          "type": "boolean",
                          "default": true
                        },
                        "storageConfig": {
                          "oneOf": [
                            {
                              "title": "AWS S3 Storage Config",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "description": "AWS credentials configs.",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                              "properties": {
                                "awsAccessKeyId": {
                                  "title": "AWS Access Key ID",
                                  "description": "AWS Access key ID.",
                                  "type": "string"
                                },
                                "awsSecretAccessKey": {
                                  "title": "AWS Secret Access Key",
                                  "description": "AWS Secret Access Key.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "awsRegion": {
                                  "title": "AWS Region",
                                  "description": "AWS Region",
                                  "type": "string"
                                },
                                "awsSessionToken": {
                                  "title": "AWS Session Token",
                                  "description": "AWS Session Token.",
                                  "type": "string"
                                },
                                "endPointURL": {
                                  "title": "Endpoint URL",
                                  "description": "EndPoint URL for the AWS",
                                  "type": "string",
                                  "format": "uri"
                                },
                                "profileName": {
                                  "title": "Profile Name",
                                  "description": "The name of a profile to use with the boto session.",
                                  "type": "string"
                                },
                                "assumeRoleArn": {
                                  "title": "Role Arn for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                                  "type": "string"
                                },
                                "assumeRoleSessionName": {
                                  "title": "Role Session Name for Assume Role",
                                  "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                                  "type": "string",
                                  "default": "OpenMetadataSession"
                                },
                                "assumeRoleSourceIdentity": {
                                  "title": "Source Identity for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "awsRegion"
                              ]
                            },
                            {
                              "title": "OpenMetadata Storage",
                              "type": "object",
                              "additionalProperties": false
                            }
                          ]
                        }
                      }
                    },
                    {
                      "title": "No Sample Data Storage Config",
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "supportsDataDiff": {
              "title": "Supports Data Diff Extraction.",
              "description": "Supports the data diff data qualty specification.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "hostPort",
            "username",
            "database"
          ]
        },
        {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "MysqlConnection",
          "description": "Mysql Database Connection Config",
          "type": "object",
          "javaType": "org.openmetadata.schema.services.connections.database.MysqlConnection",
          "definitions": {
            "mySQLType": {
              "description": "Service type.",
              "type": "string",
              "enum": [
                "Mysql"
              ],
              "default": "Mysql"
            },
            "mySQLScheme": {
              "description": "SQLAlchemy driver scheme options.",
              "type": "string",
              "enum": [
                "mysql+pymysql"
              ],
              "default": "mysql+pymysql"
            }
          },
          "properties": {
            "type": {
              "title": "Service Type",
              "description": "Service Type",
              "default": "Mysql",
              "type": "string",
              "enum": [
                "Mysql"
              ]
            },
            "scheme": {
              "title": "Connection Scheme",
              "description": "SQLAlchemy driver scheme options.",
              "default": "mysql+pymysql",
              "type": "string",
              "enum": [
                "mysql+pymysql"
              ]
            },
            "username": {
              "title": "Username",
              "description": "Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.",
              "type": "string"
            },
            "authType": {
              "title": "Auth Configuration Type",
              "description": "Choose Auth Config Type.",
              "mask": true,
              "oneOf": [
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Basic Auth",
                  "description": "Common Database Connection Config",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                  "type": "object",
                  "properties": {
                    "password": {
                      "title": "Password",
                      "description": "Password to connect to source.",
                      "type": "string",
                      "format": "password"
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "IAM Auth Configuration Source",
                  "description": "IAM Auth Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                  "properties": {
                    "awsConfig": {
                      "title": "AWS Credentials Configuration",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Azure Configuration Source",
                  "description": "Azure Database Connection Config",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.services.connections.database.common.AzureConfig",
                  "properties": {
                    "azureConfig": {
                      "title": "Azure Credentials Configuration",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "Azure Cloud Credentials",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
                      "properties": {
                        "clientId": {
                          "title": "Client ID",
                          "description": "Your Service Principal App ID (Client ID)",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "Your Service Principal Password (Client Secret)",
                          "type": "string",
                          "format": "password"
                        },
                        "tenantId": {
                          "title": "Tenant ID",
                          "description": "Tenant ID of your Azure Subscription",
                          "type": "string"
                        },
                        "accountName": {
                          "title": "Storage Account Name",
                          "description": "Account Name of your storage account",
                          "type": "string"
                        },
                        "vaultName": {
                          "title": "Key Vault Name",
                          "description": "Key Vault Name",
                          "type": "string"
                        },
                        "scopes": {
                          "title": "Scopes",
                          "description": "Scopes to get access token, for e.g. api://6dfX33ab-XXXX-49df-XXXX-3459eX817d3e/.default",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "hostPort": {
              "title": "Host and Port",
              "description": "Host and port of the MySQL service.",
              "type": "string"
            },
            "databaseName": {
              "title": "Database Name",
              "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
              "type": "string"
            },
            "databaseSchema": {
              "title": "Database Schema",
              "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
              "type": "string"
            },
            "sslConfig": {
              "title": "SSL Config",
              "description": "Client SSL configuration",
              "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
              "mask": true,
              "oneOf": [
                {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Validate SSL Client Config",
                  "description": "OpenMetadata Client configured to validate SSL certificates.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
                  "additionalProperties": false,
                  "properties": {
                    "caCertificate": {
                      "title": "CA Certificate",
                      "description": "The CA certificate used for SSL validation.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    },
                    "sslCertificate": {
                      "title": "SSL Certificate",
                      "description": "The SSL certificate used for client authentication.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    },
                    "sslKey": {
                      "title": "SSL Key",
                      "description": "The private key associated with the SSL certificate.",
                      "type": "string",
                      "format": "password",
                      "accept": [
                        ".pem",
                        ".crt",
                        ".cer",
                        ".der",
                        ".p12"
                      ],
                      "uiFieldType": "file"
                    }
                  }
                }
              ]
            },
            "connectionOptions": {
              "title": "Connection Options",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
              "description": "Additional connection options to build the URL that can be sent to service during the connection.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "connectionArguments": {
              "title": "Connection Arguments",
              "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
              "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
              "type": "object",
              "additionalProperties": {
                ".{1,}": {
                  "type": "string"
                }
              }
            },
            "schemaFilterPattern": {
              "title": "Default Schema Filter Pattern",
              "description": "Regex to only include/exclude schemas that matches the pattern.",
              "type": "object",
              "properties": {
                "includes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [
                    "^information_schema$",
                    "^performance_schema$"
                  ]
                }
              }
            },
            "tableFilterPattern": {
              "title": "Default Table Filter Pattern",
              "description": "Regex to only include/exclude tables that matches the pattern.",
              "type": "object",
              "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
              "properties": {
                "includes": {
                  "description": "List of strings/regex patterns to match and include only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "description": "List of strings/regex patterns to match and exclude only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                }
              },
              "additionalProperties": false
            },
            "databaseFilterPattern": {
              "title": "Default Database Filter Pattern",
              "description": "Regex to only include/exclude databases that matches the pattern.",
              "type": "object",
              "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
              "properties": {
                "includes": {
                  "description": "List of strings/regex patterns to match and include only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "excludes": {
                  "description": "List of strings/regex patterns to match and exclude only database entities that match.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                }
              },
              "additionalProperties": false
            },
            "supportsMetadataExtraction": {
              "title": "Supports Metadata Extraction",
              "description": "Supports Metadata Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsDBTExtraction": {
              "description": "Supports DBT Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsProfiler": {
              "title": "Supports Profiler",
              "description": "Supports Profiler",
              "type": "boolean",
              "default": true
            },
            "supportsQueryComment": {
              "title": "Supports Query Comment",
              "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
              "type": "boolean",
              "default": true
            },
            "sampleDataStorageConfig": {
              "title": "Storage Config for Sample Data",
              "description": "Storage config to store sample data",
              "type": "object",
              "javaType": "org.openmetadata.schema.services.connections.database.SampleDataStorageConfig",
              "properties": {
                "config": {
                  "oneOf": [
                    {
                      "title": "Sample Data Storage Config",
                      "description": "Storage config to store sample data",
                      "type": "object",
                      "properties": {
                        "bucketName": {
                          "title": "Bucket Name",
                          "description": "Bucket Name",
                          "type": "string",
                          "default": ""
                        },
                        "prefix": {
                          "title": "Prefix",
                          "description": "Prefix of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "filePathPattern": {
                          "title": "File Path Pattern",
                          "description": "Provide the pattern of the path where the generated sample data file needs to be stored.",
                          "type": "string",
                          "default": "{service_name}/{database_name}/{database_schema_name}/{table_name}/sample_data.parquet"
                        },
                        "overwriteData": {
                          "title": "Overwrite Sample Data",
                          "description": "When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day",
                          "type": "boolean",
                          "default": true
                        },
                        "storageConfig": {
                          "oneOf": [
                            {
                              "title": "AWS S3 Storage Config",
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "description": "AWS credentials configs.",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                              "properties": {
                                "awsAccessKeyId": {
                                  "title": "AWS Access Key ID",
                                  "description": "AWS Access key ID.",
                                  "type": "string"
                                },
                                "awsSecretAccessKey": {
                                  "title": "AWS Secret Access Key",
                                  "description": "AWS Secret Access Key.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "awsRegion": {
                                  "title": "AWS Region",
                                  "description": "AWS Region",
                                  "type": "string"
                                },
                                "awsSessionToken": {
                                  "title": "AWS Session Token",
                                  "description": "AWS Session Token.",
                                  "type": "string"
                                },
                                "endPointURL": {
                                  "title": "Endpoint URL",
                                  "description": "EndPoint URL for the AWS",
                                  "type": "string",
                                  "format": "uri"
                                },
                                "profileName": {
                                  "title": "Profile Name",
                                  "description": "The name of a profile to use with the boto session.",
                                  "type": "string"
                                },
                                "assumeRoleArn": {
                                  "title": "Role Arn for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                                  "type": "string"
                                },
                                "assumeRoleSessionName": {
                                  "title": "Role Session Name for Assume Role",
                                  "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                                  "type": "string",
                                  "default": "OpenMetadataSession"
                                },
                                "assumeRoleSourceIdentity": {
                                  "title": "Source Identity for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "awsRegion"
                              ]
                            },
                            {
                              "title": "OpenMetadata Storage",
                              "type": "object",
                              "additionalProperties": false
                            }
                          ]
                        }
                      }
                    },
                    {
                      "title": "No Sample Data Storage Config",
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "supportsDataDiff": {
              "title": "Supports Data Diff Extraction.",
              "description": "Supports the data diff data qualty specification.",
              "type": "boolean",
              "default": true
            },
            "supportsUsageExtraction": {
              "description": "Supports Usage Extraction.",
              "type": "boolean",
              "default": true
            },
            "supportsLineageExtraction": {
              "description": "Supports Lineage Extraction.",
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false,
          "required": [
            "hostPort",
            "username"
          ]
        },
        {
          "title": "None",
          "type": "object",
          "additionalProperties": false
        }
      ]
    },
    "projectName": {
      "title": "Project Name",
      "description": "Project name to create the refreshToken. Can be anything",
      "type": "string",
      "default": "AlationAPI"
    },
    "paginationLimit": {
      "title": "Pagination Limit",
      "description": "Pagination limit used for Alation APIs pagination",
      "type": "integer",
      "default": 10
    },
    "includeUndeployedDatasources": {
      "title": "Include Undeployed Datasources",
      "description": "Specifies if undeployed datasources should be included while ingesting.",
      "type": "boolean",
      "default": false
    },
    "includeHiddenDatasources": {
      "title": "Include Hidden Datasources",
      "description": "Specifies if hidden datasources should be included while ingesting.",
      "type": "boolean",
      "default": false
    },
    "ingestDatasources": {
      "title": "Ingest Datasources",
      "description": "Specifies if Datasources are to be ingested while running the ingestion job.",
      "type": "boolean",
      "default": true
    },
    "ingestUsersAndGroups": {
      "title": "Ingest Users and Groups",
      "description": "Specifies if Users and Groups are to be ingested while running the ingestion job.",
      "type": "boolean",
      "default": true
    },
    "ingestDomains": {
      "title": "Ingest Domains",
      "description": "Specifies if Domains are to be ingested while running the ingestion job.",
      "type": "boolean",
      "default": true
    },
    "ingestKnowledgeArticles": {
      "title": "Ingest Knowledge Articles",
      "description": "Specifies if Knowledge Articles are to be ingested while running the ingestion job.",
      "type": "boolean",
      "default": true
    },
    "ingestDashboards": {
      "title": "Ingest Dashboards",
      "description": "Specifies if Dashboards are to be ingested while running the ingestion job.",
      "type": "boolean",
      "default": true
    },
    "alationTagClassificationName": {
      "title": "Alation Tags Classification Name",
      "description": "Custom OpenMetadata Classification name for alation tags.",
      "type": "string",
      "default": "alationTags"
    },
    "connectionOptions": {
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "schemaFilterPattern": {
      "title": "Default Schema Filter Pattern",
      "description": "Regex to only include/exclude schemas that matches the pattern.",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "tableFilterPattern": {
      "title": "Default Table Filter Pattern",
      "description": "Regex to only include/exclude tables that matches the pattern.",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "databaseFilterPattern": {
      "title": "Default Database Filter Pattern",
      "description": "Regex to only include/exclude databases that matches the pattern.",
      "type": "object",
      "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
      "properties": {
        "includes": {
          "description": "List of strings/regex patterns to match and include only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "excludes": {
          "description": "List of strings/regex patterns to match and exclude only database entities that match.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "additionalProperties": false
    },
    "supportsMetadataExtraction": {
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    }
  },
  "required": [
    "hostPort",
    "authType"
  ],
  "additionalProperties": false
}