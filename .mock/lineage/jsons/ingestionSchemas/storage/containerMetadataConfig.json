{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StorageContainerConfig",
  "description": "Definition of the properties contained by an object store container template config file",
  "javaType": "org.openmetadata.schema.metadataIngestion.storage.ContainerMetadataConfig",
  "type": "object",
  "definitions": {
    "metadataEntry": {
      "description": "Config properties for a container found in a user-supplied metadata config",
      "javaType": "org.openmetadata.schema.metadataIngestion.storage.ContainerMetadataEntry",
      "type": "object",
      "properties": {
        "dataPath": {
          "title": "Data path",
          "description": "The path where the data resides in the container, excluding the bucket name",
          "type": "string"
        },
        "structureFormat": {
          "title": "Schema format",
          "description": "What's the schema format for the container, eg. avro, parquet, csv.",
          "type": "string",
          "default": null
        },
        "unstructuredFormats": {
          "title": "Unstructured format",
          "description": "What the unstructured formats you want to ingest, eg. png, pdf, jpg.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": null
        },
        "depth": {
          "title": "Depth",
          "description": "Depth of the data path in the container",
          "type": "integer",
          "default": 0
        },
        "separator": {
          "title": "Separator",
          "description": "For delimited files such as CSV, what is the separator being used?",
          "type": "string",
          "default": null
        },
        "isPartitioned": {
          "title": "Is Partitioned",
          "description": "Flag indicating whether the container's data is partitioned",
          "type": "boolean",
          "default": false
        },
        "partitionColumns": {
          "title": "Partition Columns",
          "description": "What are the partition columns in case the container's data is partitioned",
          "type": "array",
          "items": {
            "type": "object",
            "javaType": "org.openmetadata.schema.type.Column",
            "javaInterfaces": [
              "org.openmetadata.schema.FieldInterface"
            ],
            "description": "This schema defines the type for a column in a table.",
            "properties": {
              "name": {
                "description": "Local name (not fully qualified name) of the column. ColumnName is `-` when the column is not named in struct dataType. For example, BigQuery supports struct with unnamed fields.",
                "type": "string",
                "minLength": 1,
                "maxLength": 256,
                "pattern": "^((?!::).)*$"
              },
              "displayName": {
                "description": "Display Name that identifies this column name.",
                "type": "string"
              },
              "dataType": {
                "description": "Data type of the column (int, date etc.).",
                "javaType": "org.openmetadata.schema.type.ColumnDataType",
                "type": "string",
                "enum": [
                  "NUMBER",
                  "TINYINT",
                  "SMALLINT",
                  "INT",
                  "BIGINT",
                  "BYTEINT",
                  "BYTES",
                  "FLOAT",
                  "DOUBLE",
                  "DECIMAL",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMPZ",
                  "TIME",
                  "DATE",
                  "DATETIME",
                  "INTERVAL",
                  "STRING",
                  "MEDIUMTEXT",
                  "TEXT",
                  "CHAR",
                  "LONG",
                  "VARCHAR",
                  "BOOLEAN",
                  "BINARY",
                  "VARBINARY",
                  "ARRAY",
                  "BLOB",
                  "LONGBLOB",
                  "MEDIUMBLOB",
                  "MAP",
                  "STRUCT",
                  "UNION",
                  "SET",
                  "GEOGRAPHY",
                  "ENUM",
                  "JSON",
                  "UUID",
                  "VARIANT",
                  "GEOMETRY",
                  "BYTEA",
                  "AGGREGATEFUNCTION",
                  "ERROR",
                  "FIXED",
                  "RECORD",
                  "NULL",
                  "SUPER",
                  "HLLSKETCH",
                  "PG_LSN",
                  "PG_SNAPSHOT",
                  "TSQUERY",
                  "TXID_SNAPSHOT",
                  "XML",
                  "MACADDR",
                  "TSVECTOR",
                  "UNKNOWN",
                  "CIDR",
                  "INET",
                  "CLOB",
                  "ROWID",
                  "LOWCARDINALITY",
                  "YEAR",
                  "POINT",
                  "POLYGON",
                  "TUPLE",
                  "SPATIAL",
                  "TABLE",
                  "NTEXT",
                  "IMAGE",
                  "IPV4",
                  "IPV6",
                  "DATETIMERANGE",
                  "HLL",
                  "LARGEINT",
                  "QUANTILE_STATE",
                  "AGG_STATE",
                  "BITMAP",
                  "UINT",
                  "BIT",
                  "MONEY",
                  "MEASURE HIDDEN",
                  "MEASURE VISIBLE"
                ]
              },
              "arrayDataType": {
                "description": "Data type used array in dataType. For example, `array<int>` has dataType as `array` and arrayDataType as `int`.",
                "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/dataType"
              },
              "dataLength": {
                "description": "Length of `char`, `varchar`, `binary`, `varbinary` `dataTypes`, else null. For example, `varchar(20)` has dataType as `varchar` and dataLength as `20`.",
                "type": "integer"
              },
              "precision": {
                "description": "The precision of a numeric is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. Precision is applicable Integer types, such as `INT`, `SMALLINT`, `BIGINT`, etc. It also applies to other Numeric types, such as `NUMBER`, `DECIMAL`, `DOUBLE`, `FLOAT`, etc.",
                "type": "integer"
              },
              "scale": {
                "description": "The scale of a numeric is the count of decimal digits in the fractional part, to the right of the decimal point. For Integer types, the scale is `0`. It mainly applies to non Integer Numeric types, such as `NUMBER`, `DECIMAL`, `DOUBLE`, `FLOAT`, etc.",
                "type": "integer"
              },
              "dataTypeDisplay": {
                "description": "Display name used for dataType. This is useful for complex types, such as `array<int>`, `map<int,string>`, `struct<>`, and union types.",
                "type": "string"
              },
              "description": {
                "description": "Description of the column.",
                "$comment": "@om-field-type",
                "type": "string"
              },
              "fullyQualifiedName": {
                "description": "A unique name that identifies an entity. Example for table 'DatabaseService.Database.Schema.Table'.",
                "type": "string",
                "minLength": 1,
                "maxLength": 3072
              },
              "tags": {
                "description": "Tags associated with the column.",
                "type": "array",
                "items": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "TagLabel",
                  "description": "This schema defines the type for labeling an entity with a Tag.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.type.TagLabel",
                  "definitions": {
                    "tagFQN": {
                      "type": "string"
                    },
                    "TagSource": {
                      "type": "string",
                      "default": "Classification",
                      "enum": [
                        "Classification",
                        "Glossary"
                      ]
                    }
                  },
                  "properties": {
                    "tagFQN": {
                      "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/tags/items/definitions/tagFQN"
                    },
                    "name": {
                      "description": "Name of the tag or glossary term.",
                      "type": "string"
                    },
                    "displayName": {
                      "description": "Display Name that identifies this tag.",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description for the tag label.",
                      "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/description"
                    },
                    "style": {
                      "description": "UI Style is used to associate a color code and/or icon to entity to customize the look of that entity in UI.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.entity.type.Style",
                      "properties": {
                        "color": {
                          "description": "Hex Color Code to mark an entity such as GlossaryTerm, Tag, Domain or Data Product.",
                          "type": "string"
                        },
                        "iconURL": {
                          "description": "An icon to associate with GlossaryTerm, Tag, Domain or Data Product.",
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "additionalProperties": false
                    },
                    "source": {
                      "description": "Label is from Tags or Glossary.",
                      "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/tags/items/definitions/TagSource"
                    },
                    "labelType": {
                      "description": "Label type describes how a tag label was applied. 'Manual' indicates the tag label was applied by a person. 'Derived' indicates a tag label was derived using the associated tag relationship (see Classification.json for more details). 'Propagated` indicates a tag label was propagated from upstream based on lineage. 'Automated' is used when a tool was used to determine the tag label.",
                      "type": "string",
                      "enum": [
                        "Manual",
                        "Propagated",
                        "Automated",
                        "Derived"
                      ],
                      "default": "Manual"
                    },
                    "state": {
                      "description": "'Suggested' state is used when a tag label is suggested by users or tools. Owner of the entity must confirm the suggested labels before it is marked as 'Confirmed'.",
                      "type": "string",
                      "enum": [
                        "Suggested",
                        "Confirmed"
                      ],
                      "default": "Confirmed"
                    },
                    "href": {
                      "description": "Link to the tag resource.",
                      "type": "string",
                      "format": "uri"
                    }
                  },
                  "required": [
                    "tagFQN",
                    "source",
                    "labelType",
                    "state"
                  ],
                  "additionalProperties": false
                },
                "default": []
              },
              "constraint": {
                "description": "Column level constraint.",
                "javaType": "org.openmetadata.schema.type.ColumnConstraint",
                "type": "string",
                "enum": [
                  "NULL",
                  "NOT_NULL",
                  "UNIQUE",
                  "PRIMARY_KEY"
                ],
                "default": null,
                "additionalProperties": false
              },
              "ordinalPosition": {
                "description": "Ordinal position of the column.",
                "type": "integer"
              },
              "jsonSchema": {
                "description": "Json schema only if the dataType is JSON else null.",
                "type": "string"
              },
              "children": {
                "description": "Child columns if dataType or arrayDataType is `map`, `struct`, or `union` else `null`.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items"
                },
                "default": null
              },
              "profile": {
                "description": "Latest Data profile for a Column.",
                "default": null,
                "type": "object",
                "javaType": "org.openmetadata.schema.type.ColumnProfile",
                "properties": {
                  "name": {
                    "description": "Column Name.",
                    "type": "string"
                  },
                  "timestamp": {
                    "description": "Timestamp on which profile is taken.",
                    "$comment": "@om-field-type",
                    "@comment": "Note that during code generation this is converted into long",
                    "type": "integer",
                    "format": "utc-millisec"
                  },
                  "valuesCount": {
                    "description": "Total count of the values in this column.",
                    "type": "number"
                  },
                  "valuesPercentage": {
                    "description": "Percentage of values in this column with respect to row count.",
                    "type": "number"
                  },
                  "validCount": {
                    "description": "Total count of valid values in this column.",
                    "type": "number"
                  },
                  "duplicateCount": {
                    "description": "No.of Rows that contain duplicates in a column.",
                    "type": "number"
                  },
                  "nullCount": {
                    "description": "No.of null values in a column.",
                    "type": "number"
                  },
                  "nullProportion": {
                    "description": "No.of null value proportion in columns.",
                    "type": "number"
                  },
                  "missingPercentage": {
                    "description": "Missing Percentage is calculated by taking percentage of validCount/valuesCount.",
                    "type": "number"
                  },
                  "missingCount": {
                    "description": "Missing count is calculated by subtracting valuesCount - validCount.",
                    "type": "number"
                  },
                  "uniqueCount": {
                    "description": "No. of unique values in the column.",
                    "type": "number"
                  },
                  "uniqueProportion": {
                    "description": "Proportion of number of unique values in a column.",
                    "type": "number"
                  },
                  "distinctCount": {
                    "description": "Number of values that contain distinct values.",
                    "type": "number"
                  },
                  "distinctProportion": {
                    "description": "Proportion of distinct values in a column.",
                    "type": "number"
                  },
                  "min": {
                    "description": "Minimum value in a column.",
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "description": "Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.",
                        "type": "string",
                        "format": "date-time"
                      },
                      {
                        "description": "time in ISO 8601 format. Example - '20:20:39+00:00'.",
                        "type": "string",
                        "format": "time"
                      },
                      {
                        "description": "Date in ISO 8601 format in UTC. Example - '2018-11-13'.",
                        "type": "string",
                        "format": "date"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "max": {
                    "description": "Maximum value in a column.",
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/profile/properties/min/oneOf/2"
                      },
                      {
                        "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/profile/properties/min/oneOf/3"
                      },
                      {
                        "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/profile/properties/min/oneOf/4"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "minLength": {
                    "description": "Minimum string length in a column.",
                    "type": "number"
                  },
                  "maxLength": {
                    "description": "Maximum string length in a column.",
                    "type": "number"
                  },
                  "mean": {
                    "description": "Avg value in a column.",
                    "type": "number"
                  },
                  "sum": {
                    "description": "Median value in a column.",
                    "type": "number"
                  },
                  "stddev": {
                    "description": "Standard deviation of a column.",
                    "type": "number"
                  },
                  "variance": {
                    "description": "Variance of a column.",
                    "type": "number"
                  },
                  "median": {
                    "description": "Median of a column.",
                    "type": "number"
                  },
                  "firstQuartile": {
                    "description": "First quartile of a column.",
                    "type": "number"
                  },
                  "thirdQuartile": {
                    "description": "First quartile of a column.",
                    "type": "number"
                  },
                  "interQuartileRange": {
                    "description": "Inter quartile range of a column.",
                    "type": "number"
                  },
                  "nonParametricSkew": {
                    "description": "Non parametric skew of a column.",
                    "type": "number"
                  },
                  "histogram": {
                    "description": "Histogram of a column.",
                    "properties": {
                      "boundaries": {
                        "description": "Boundaries of Histogram.",
                        "type": "array"
                      },
                      "frequencies": {
                        "description": "Frequencies of Histogram.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false
                  },
                  "customMetrics": {
                    "description": "Custom Metrics profile list bound to a column.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "javaType": "org.openmetadata.schema.type.CustomMetricProfile",
                      "description": "Profiling results of a Custom Metric.",
                      "properties": {
                        "name": {
                          "description": "Custom metric name.",
                          "type": "string"
                        },
                        "value": {
                          "description": "Profiling results for the metric.",
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "default": null
                  }
                },
                "required": [
                  "name",
                  "timestamp"
                ],
                "additionalProperties": false
              },
              "customMetrics": {
                "description": "List of Custom Metrics registered for a table.",
                "type": "array",
                "items": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "CustomMetric",
                  "description": "Custom Metric definition that we will associate with a column.",
                  "type": "object",
                  "javaType": "org.openmetadata.schema.tests.CustomMetric",
                  "properties": {
                    "id": {
                      "description": "Unique identifier of this Custom Metric instance.",
                      "type": "string",
                      "format": "uuid"
                    },
                    "name": {
                      "description": "Name that identifies this Custom Metric.",
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 256,
                      "pattern": "^((?!::).)*$"
                    },
                    "description": {
                      "description": "Description of the Metric.",
                      "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/description"
                    },
                    "columnName": {
                      "description": "Name of the column in a table.",
                      "type": "string"
                    },
                    "expression": {
                      "description": "SQL expression to compute the Metric. It should return a single numerical value.",
                      "type": "string"
                    },
                    "owners": {
                      "description": "Owners of this Custom Metric.",
                      "default": null,
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Entity Reference List",
                      "type": "array",
                      "items": {
                        "$schema": "http://json-schema.org/draft-07/schema#",
                        "title": "Entity Reference",
                        "description": "This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.",
                        "type": "object",
                        "javaType": "org.openmetadata.schema.type.EntityReference",
                        "properties": {
                          "id": {
                            "description": "Unique identifier that identifies an entity instance.",
                            "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/children/items/properties/customMetrics/items/properties/id"
                          },
                          "type": {
                            "description": "Entity type/class name - Examples: `database`, `table`, `metrics`, `databaseService`, `dashboardService`...",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the entity instance.",
                            "type": "string"
                          },
                          "fullyQualifiedName": {
                            "description": "Fully qualified name of the entity instance. For entities such as tables, databases fullyQualifiedName is returned in this field. For entities that don't have name hierarchy such as `user` and `team` this will be same as the `name` field.",
                            "type": "string"
                          },
                          "description": {
                            "description": "Optional description of entity.",
                            "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/description"
                          },
                          "displayName": {
                            "description": "Display Name that identifies this entity.",
                            "type": "string"
                          },
                          "deleted": {
                            "description": "If true the entity referred to has been soft-deleted.",
                            "type": "boolean"
                          },
                          "inherited": {
                            "description": "If true the relationship indicated by this entity reference is inherited from the parent entity.",
                            "type": "boolean"
                          },
                          "href": {
                            "description": "Link to the entity resource.",
                            "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/tags/items/properties/href"
                          }
                        },
                        "required": [
                          "id",
                          "type"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "updatedAt": {
                      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
                      "$ref": "#/definitions/metadataEntry/properties/partitionColumns/items/properties/profile/properties/timestamp"
                    },
                    "updatedBy": {
                      "description": "User who made the update.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "expression"
                  ],
                  "additionalProperties": false
                },
                "default": null
              }
            },
            "required": [
              "name",
              "dataType"
            ],
            "additionalProperties": false
          },
          "default": null
        }
      },
      "required": [
        "dataPath"
      ]
    }
  },
  "properties": {
    "entries": {
      "description": "List of metadata entries for the bucket containing information about where data resides and its structure",
      "type": "array",
      "items": {
        "$ref": "#/definitions/metadataEntry"
      },
      "default": null
    }
  },
  "required": [
    "entries"
  ],
  "additionalProperties": false
}