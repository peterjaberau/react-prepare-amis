{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TestSuitePipeline",
  "description": "TestSuite Pipeline Configuration.",
  "type": "object",
  "definitions": {
    "testSuiteConfigType": {
      "description": "Pipeline Source Config Metadata Pipeline type",
      "type": "string",
      "enum": [
        "TestSuite"
      ],
      "default": "TestSuite"
    },
    "serviceConnections": {
      "description": "Service connections available for the logical test suite.",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string"
        },
        "serviceConnection": {
          "description": "Connection configuration for the source. ex: mysql , tableau connection.",
          "oneOf": [
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.ApiConnection",
              "description": "API Service Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RestConnection",
                      "description": "REST Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.api.RestConnection",
                      "definitions": {
                        "restType": {
                          "description": "REST API type",
                          "type": "string",
                          "enum": [
                            "Rest"
                          ],
                          "default": "Rest"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "REST API Type",
                          "description": "REST API Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/0/properties/config/oneOf/0/definitions/restType",
                          "default": "Rest"
                        },
                        "openAPISchemaURL": {
                          "expose": true,
                          "title": "OpenAPISchemaURL",
                          "description": "Open API Schema URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to OpenAPI Schema.",
                          "type": "string",
                          "format": "password"
                        },
                        "apiCollectionFilterPattern": {
                          "description": "Regex to only fetch api collections with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default API Collection Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "description": "Supports Metadata Extraction.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "openAPISchemaURL"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.DashboardConnection",
              "description": "Dashboard Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "LookerConnection",
                      "description": "Looker Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.LookerConnection",
                      "definitions": {
                        "lookerType": {
                          "description": "Looker service type",
                          "type": "string",
                          "enum": [
                            "Looker"
                          ],
                          "default": "Looker"
                        },
                        "noGitCredentials": {
                          "title": "No Git Credentials",
                          "description": "Do not set any credentials. Note that credentials are required to extract .lkml views and their lineage.",
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/definitions/lookerType",
                          "default": "Looker"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "User's Client ID. This user should have privileges to read all the metadata in Looker.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "User's Client Secret.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL to the Looker instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "gitCredentials": {
                          "title": "GitHub Credentials",
                          "description": "Credentials to extract the .lkml files from a repository. This is required to get all the lineage and definitions.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/definitions/noGitCredentials"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GitHubCredentials",
                              "description": "Credentials for a GitHub repository",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.GitHubCredentials",
                              "definitions": {
                                "githubType": {
                                  "description": "GitHub Credentials type",
                                  "type": "string",
                                  "enum": [
                                    "GitHub"
                                  ],
                                  "default": "GitHub"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Credentials Type",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/definitions/githubType",
                                  "default": "GitHub"
                                },
                                "repositoryOwner": {
                                  "title": "Repository Owner",
                                  "description": "The owner (user or organization) of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the owner is `open-metadata`.",
                                  "type": "string"
                                },
                                "repositoryName": {
                                  "title": "Repository Name",
                                  "description": "The name of a Git repository. For example, in https://github.com/open-metadata/OpenMetadata, the name is `OpenMetadata`.",
                                  "type": "string"
                                },
                                "token": {
                                  "title": "API Token",
                                  "description": "Token to use the API. This is required for private repositories and to ensure we don't hit API limits.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "repositoryOwner",
                                "repositoryName"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BitBucketCredentials",
                              "description": "Credentials for a BitBucket repository",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.BitBucketCredentials",
                              "definitions": {
                                "bitbucketType": {
                                  "description": "BitBucket Credentials type",
                                  "type": "string",
                                  "enum": [
                                    "BitBucket"
                                  ],
                                  "default": "BitBucket"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Credentials Type",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/2/definitions/bitbucketType",
                                  "default": "BitBucket"
                                },
                                "repositoryOwner": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryOwner"
                                },
                                "repositoryName": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryName"
                                },
                                "token": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/token"
                                },
                                "branch": {
                                  "title": "Main Branch",
                                  "description": "Main production branch of the repository. E.g., `main`",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "repositoryOwner",
                                "repositoryName",
                                "branch"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GitlabCredentials",
                              "description": "Credentials for a Gitlab repository",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.GitlabCredentials",
                              "definitions": {
                                "gitlabType": {
                                  "description": "Gitlab Credentials type",
                                  "type": "string",
                                  "enum": [
                                    "Gitlab"
                                  ],
                                  "default": "Gitlab"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Credentials Type",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/3/definitions/gitlabType",
                                  "default": "Gitlab"
                                },
                                "repositoryOwner": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryOwner"
                                },
                                "repositoryName": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/repositoryName"
                                },
                                "token": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/gitCredentials/oneOf/1/properties/token"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "repositoryOwner",
                                "repositoryName"
                              ]
                            }
                          ]
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "title": "Default Chart Filter Pattern",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.metadataIngestion.FilterPattern",
                          "properties": {
                            "includes": {
                              "description": "List of strings/regex patterns to match and include only database entities that match.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "description": "List of strings/regex patterns to match and exclude only database entities that match.",
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            }
                          },
                          "additionalProperties": false
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "clientId",
                        "clientSecret"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MetabaseConnection",
                      "description": "Metabase Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.MetabaseConnection",
                      "definitions": {
                        "metabaseType": {
                          "description": "Metabase service type",
                          "type": "string",
                          "enum": [
                            "Metabase"
                          ],
                          "default": "Metabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/1/definitions/metabaseType",
                          "default": "Metabase"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Metabase. This user should have privileges to read all the metadata in Metabase.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Metabase.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and Port of the Metabase instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PowerBIConnection",
                      "description": "PowerBI Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.PowerBIConnection",
                      "definitions": {
                        "powerBiType": {
                          "description": "PowerBI service type",
                          "type": "string",
                          "enum": [
                            "PowerBI"
                          ],
                          "default": "PowerBI"
                        },
                        "localConfig": {
                          "title": "Local Config",
                          "description": "Local config source where no extra information needs to be sent.",
                          "type": "object",
                          "properties": {
                            "pbitFileConfigType": {
                              "description": "pbit File Configuration type",
                              "type": "string",
                              "enum": [
                                "local"
                              ],
                              "default": "local"
                            },
                            "path": {
                              "title": "Path",
                              "description": "Directory path for the pbit files",
                              "type": "string"
                            },
                            "pbitFilesExtractDir": {
                              "title": "pbit Files Extraction Directory",
                              "description": "Path of the folder where the .pbit files will be unzipped and datamodel schema will be extracted",
                              "type": "string",
                              "default": "/tmp/pbitFiles"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/definitions/powerBiType",
                          "default": "PowerBI"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "client_id for PowerBI.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "clientSecret for PowerBI.",
                          "type": "string",
                          "format": "password"
                        },
                        "tenantId": {
                          "title": "Tenant ID",
                          "description": "Tenant ID for PowerBI.",
                          "type": "string"
                        },
                        "authorityURI": {
                          "title": "Authority URI",
                          "description": "Authority URI for the PowerBI service.",
                          "type": "string",
                          "default": "https://login.microsoftonline.com/"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Dashboard URL for PowerBI service.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://app.powerbi.com"
                        },
                        "scope": {
                          "title": "Scope",
                          "description": "PowerBI secrets.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": [
                            "https://analysis.windows.net/powerbi/api/.default"
                          ]
                        },
                        "pagination_entity_per_page": {
                          "title": "Pagination Entity Per Page",
                          "description": "Entity Limit set here will be used to paginate the PowerBi APIs",
                          "type": "integer",
                          "default": 100
                        },
                        "useAdminApis": {
                          "title": "Use PowerBI Admin APIs",
                          "description": "Fetch the PowerBI metadata using admin APIs",
                          "type": "boolean",
                          "default": true
                        },
                        "pbitFilesSource": {
                          "title": "PowerBI .pbit Files Source",
                          "description": "Source to get the .pbit files to extract lineage information",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/definitions/localConfig"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AzureConfig",
                              "description": "Azure storage config for pbit files",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.dashboard.powerbi.AzureConfig",
                              "properties": {
                                "pbitFileConfigType": {
                                  "description": "pbit File Configuration type",
                                  "type": "string",
                                  "enum": [
                                    "azure"
                                  ],
                                  "default": "azure"
                                },
                                "securityConfig": {
                                  "title": "Azure Config Source",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/properties/credentials"
                                },
                                "prefixConfig": {
                                  "title": "Prefix Config",
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "description": "Details of the bucket where the .pbit files are stored",
                                  "javaType": "org.openmetadata.schema.services.connections.dashboard.powerbi.bucketDetails",
                                  "type": "object",
                                  "properties": {
                                    "bucketName": {
                                      "title": "Bucket Name",
                                      "description": "Name of the bucket where the .pbit files are stored",
                                      "type": "string"
                                    },
                                    "objectPrefix": {
                                      "title": "Object Prefix",
                                      "description": "Path of the folder where the .pbit files are stored",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "pbitFilesExtractDir": {
                                  "title": "pbit Files Extraction Directory",
                                  "description": "Path of the folder where the .pbit files will be unzipped and datamodel schema will be extracted",
                                  "type": "string",
                                  "default": "/tmp/pbitFiles"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "securityConfig"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GCSConfig",
                              "description": "GCS storage config for pbit files",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.dasboard.powerbi.GCSConfig",
                              "properties": {
                                "pbitFileConfigType": {
                                  "description": "pbit File Configuration type",
                                  "type": "string",
                                  "enum": [
                                    "gcs"
                                  ],
                                  "default": "gcs"
                                },
                                "securityConfig": {
                                  "title": "GCS Security Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials"
                                },
                                "prefixConfig": {
                                  "title": "Prefix Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/properties/pbitFilesSource/oneOf/1/properties/prefixConfig"
                                },
                                "pbitFilesExtractDir": {
                                  "title": "pbit Files Extraction Directory",
                                  "description": "Path of the folder where the .pbit files will be unzipped and datamodel schema will be extracted",
                                  "type": "string",
                                  "default": "/tmp/pbitFiles"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "securityConfig"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "S3Config",
                              "description": "S3 storage config for pbit files",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.dashboard.powerbi.S3Config",
                              "properties": {
                                "pbitFileConfigType": {
                                  "description": "pbit File Configuration type",
                                  "type": "string",
                                  "enum": [
                                    "s3"
                                  ],
                                  "default": "s3"
                                },
                                "securityConfig": {
                                  "title": "S3 Security Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                },
                                "prefixConfig": {
                                  "title": "Prefix Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/2/properties/pbitFilesSource/oneOf/1/properties/prefixConfig"
                                },
                                "pbitFilesExtractDir": {
                                  "title": "pbit Files Extraction Directory",
                                  "description": "Path of the folder where the .pbit files will be unzipped and datamodel schema will be extracted",
                                  "type": "string",
                                  "default": "/tmp/pbitFiles"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "securityConfig"
                              ]
                            }
                          ]
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "clientSecret",
                        "tenantId"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PowerBIReportServerConnection",
                      "description": "PowerBIReportServer Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.PowerBIReportServerConnection",
                      "definitions": {
                        "powerBIReportServerType": {
                          "description": "PowerBIReportServer service type",
                          "type": "string",
                          "enum": [
                            "PowerBIReportServer"
                          ],
                          "default": "PowerBIReportServer"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/3/definitions/powerBIReportServerType",
                          "default": "PowerBIReportServer"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Dashboard URL for PowerBI Report Server.",
                          "type": "string",
                          "format": "uri"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to PowerBI report server.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to PowerBI report server.",
                          "type": "string",
                          "format": "password"
                        },
                        "webPortalVirtualDirectory": {
                          "title": "Web Portal Virtual Directory Name",
                          "description": "Web Portal Virtual Directory Name.",
                          "type": "string",
                          "default": "Reports"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "password"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedashConnection",
                      "description": "Redash Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.RedashConnection",
                      "definitions": {
                        "redashType": {
                          "description": "Redash service type",
                          "type": "string",
                          "enum": [
                            "Redash"
                          ],
                          "default": "Redash"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/4/definitions/redashType",
                          "default": "Redash"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username for Redash",
                          "type": "string"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the Redash instance",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:5000"
                        },
                        "apiKey": {
                          "title": "API Key",
                          "description": "API key of the redash instance to access.",
                          "type": "string",
                          "format": "password"
                        },
                        "redashVersion": {
                          "title": "Redash Version",
                          "description": "Version of the Redash instance",
                          "type": "string",
                          "default": "10.0.0"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "apiKey"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SupersetConnection",
                      "description": "Superset Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.SupersetConnection",
                      "definitions": {
                        "supersetType": {
                          "description": "Superset service type",
                          "type": "string",
                          "enum": [
                            "Superset"
                          ],
                          "default": "Superset"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/5/definitions/supersetType",
                          "default": "Superset"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the superset instance.",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:8088"
                        },
                        "connection": {
                          "title": "Superset Connection",
                          "description": "Choose between API or database connection fetch metadata from superset.",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "SupersetApiConnection",
                              "description": "Superset API Connection Config",
                              "type": "object",
                              "definitions": {
                                "apiProvider": {
                                  "title": "Provider",
                                  "description": "Authentication provider for the Superset service. For basic user/password authentication, the default value `db` can be used. This parameter is used internally to connect to Superset's REST API.",
                                  "type": "string",
                                  "enum": [
                                    "db",
                                    "ldap"
                                  ],
                                  "default": "db"
                                }
                              },
                              "properties": {
                                "provider": {
                                  "title": "Provider",
                                  "description": "Authentication provider for the Superset service. For basic user/password authentication, the default value `db` can be used. This parameter is used internally to connect to Superset's REST API.",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/5/properties/connection/oneOf/0/definitions/apiProvider",
                                  "default": "db"
                                },
                                "username": {
                                  "title": "Username",
                                  "description": "Username for Superset.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password for Superset.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "verifySSL": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                                  "default": "no-ssl"
                                },
                                "sslConfig": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "provider",
                                "password",
                                "username"
                              ]
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15"
                            }
                          ],
                          "default": {
                            "provider": "db"
                          }
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "connection"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "TableauConnection",
                      "description": "Tableau Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.TableauConnection",
                      "definitions": {
                        "tableauType": {
                          "description": "Tableau service type",
                          "type": "string",
                          "enum": [
                            "Tableau"
                          ],
                          "default": "Tableau"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/definitions/tableauType",
                          "default": "Tableau"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Tableau Server.",
                          "type": "string",
                          "format": "uri"
                        },
                        "authType": {
                          "mask": true,
                          "title": "Authentication type for Tableau",
                          "description": "Types of methods used to authenticate to the tableau instance",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BasicAuth",
                              "description": "Basic Auth Credentials",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.BasicAuth",
                              "properties": {
                                "username": {
                                  "title": "Username",
                                  "description": "Username to access the service.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password to access the service.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "required": [
                                "username",
                                "password"
                              ],
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AccessTokenAuth",
                              "description": "Access Token Auth Credentials",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.AccessTokenAuth",
                              "properties": {
                                "personalAccessTokenName": {
                                  "title": "Personal Access Token",
                                  "description": "Personal Access Token Name.",
                                  "type": "string"
                                },
                                "personalAccessTokenSecret": {
                                  "title": "Personal Access Token Secret",
                                  "description": "Personal Access Token Secret.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "required": [
                                "personalAccessTokenName",
                                "personalAccessTokenSecret"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "apiVersion": {
                          "title": "API Version",
                          "description": "Tableau API version.",
                          "type": "string"
                        },
                        "siteName": {
                          "title": "Site Name",
                          "description": "Tableau Site Name.",
                          "type": "string"
                        },
                        "siteUrl": {
                          "title": "Site Url",
                          "description": "Tableau Site Url.",
                          "type": "string"
                        },
                        "env": {
                          "title": "Tableau Environment",
                          "description": "Tableau Environment Name.",
                          "type": "string",
                          "default": "tableau_prod"
                        },
                        "paginationLimit": {
                          "title": "Pagination Limit",
                          "description": "Pagination limit used while querying the tableau metadata API for getting data sources",
                          "type": "integer",
                          "default": 10
                        },
                        "verifySSL": {
                          "default": "no-ssl",
                          "title": "Verify SSL",
                          "description": "Client SSL verification. Make sure to configure the SSLConfig if enabled.",
                          "javaType": "org.openmetadata.schema.security.ssl.VerifySSL",
                          "type": "string",
                          "enum": [
                            "no-ssl",
                            "ignore",
                            "validate"
                          ]
                        },
                        "sslConfig": {
                          "title": "SSL Config",
                          "description": "Client SSL configuration",
                          "javaType": "org.openmetadata.schema.security.ssl.SSLConfig",
                          "mask": true,
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Validate SSL Client Config",
                              "description": "OpenMetadata Client configured to validate SSL certificates.",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.ssl.ValidateSSLClientConfig",
                              "additionalProperties": false,
                              "properties": {
                                "caCertificate": {
                                  "title": "CA Certificate",
                                  "description": "The CA certificate used for SSL validation.",
                                  "type": "string",
                                  "format": "password",
                                  "accept": [
                                    ".pem",
                                    ".crt",
                                    ".cer",
                                    ".der",
                                    ".p12"
                                  ],
                                  "uiFieldType": "file"
                                },
                                "sslCertificate": {
                                  "title": "SSL Certificate",
                                  "description": "The SSL certificate used for client authentication.",
                                  "type": "string",
                                  "format": "password",
                                  "accept": [
                                    ".pem",
                                    ".crt",
                                    ".cer",
                                    ".der",
                                    ".p12"
                                  ],
                                  "uiFieldType": "file"
                                },
                                "sslKey": {
                                  "title": "SSL Key",
                                  "description": "The private key associated with the SSL certificate.",
                                  "type": "string",
                                  "format": "password",
                                  "accept": [
                                    ".pem",
                                    ".crt",
                                    ".cer",
                                    ".der",
                                    ".p12"
                                  ],
                                  "uiFieldType": "file"
                                }
                              }
                            }
                          ]
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "apiVersion",
                        "env",
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ModeConnection",
                      "description": "Mode Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.ModeConnection",
                      "definitions": {
                        "modeType": {
                          "description": "Mode service type",
                          "type": "string",
                          "enum": [
                            "Mode"
                          ],
                          "default": "Mode"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/7/definitions/modeType",
                          "default": "Mode"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "URL for the mode instance.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://app.mode.com"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access Token for Mode Dashboard",
                          "type": "string"
                        },
                        "accessTokenPassword": {
                          "title": "Access Token Password",
                          "description": "Access Token Password for Mode Dashboard",
                          "type": "string",
                          "format": "password"
                        },
                        "workspaceName": {
                          "title": "Workspace Name",
                          "description": "Mode Workspace Name",
                          "type": "string"
                        },
                        "filterQueryParam": {
                          "title": "Filter Query Param",
                          "description": "Filter query parameter for some of the Mode API calls",
                          "type": "string"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "accessToken",
                        "accessTokenPassword",
                        "workspaceName"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomDashboardConnection",
                      "description": "Custom Dashboard Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.CustomDashboardConnection",
                      "definitions": {
                        "customDashboardType": {
                          "title": "Service Type",
                          "description": "Custom dashboard service type",
                          "type": "string",
                          "enum": [
                            "CustomDashboard"
                          ],
                          "default": "CustomDashboard"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom dashboard service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/8/definitions/customDashboardType",
                          "default": "CustomDashboard"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoDashboardConnection",
                      "description": "Domo Dashboard Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.DomoDashboardConnection",
                      "definitions": {
                        "domoDashboardType": {
                          "description": " service type",
                          "type": "string",
                          "enum": [
                            "DomoDashboard"
                          ],
                          "default": "DomoDashboard"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/9/definitions/domoDashboardType",
                          "default": "DomoDashboard"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret Token to connect DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "QuickSightConnection",
                      "description": "QuickSight Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.QuickSightConnection",
                      "definitions": {
                        "quickSightType": {
                          "description": "QuickSight service type",
                          "type": "string",
                          "enum": [
                            "QuickSight"
                          ],
                          "default": "QuickSight"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/10/definitions/quickSightType",
                          "default": "QuickSight"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "awsAccountId": {
                          "title": "AWS Account ID",
                          "description": "AWS Account ID",
                          "type": "string"
                        },
                        "identityType": {
                          "title": "Identity Type",
                          "description": "The authentication method that the user uses to sign in.",
                          "type": "string",
                          "enum": [
                            "IAM",
                            "QUICKSIGHT",
                            "ANONYMOUS"
                          ],
                          "default": "IAM"
                        },
                        "namespace": {
                          "description": "The Amazon QuickSight namespace that contains the dashboard IDs in this request ( To be provided when identityType is `ANONYMOUS` )",
                          "type": "string"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig",
                        "awsAccountId"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "QlikSenseConnection",
                      "description": "Qlik Sense Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.QlikSenseConnection",
                      "definitions": {
                        "qlikSenseType": {
                          "description": "Qlik sense service type",
                          "type": "string",
                          "enum": [
                            "QlikSense"
                          ],
                          "default": "QlikSense"
                        },
                        "qlikCertificatePath": {
                          "description": "Qlik Authentication Certificate File Path",
                          "title": "Qlik Certificates By File Path",
                          "type": "object",
                          "properties": {
                            "clientCertificate": {
                              "title": "Client Certificate Path",
                              "description": "Client Certificate",
                              "type": "string"
                            },
                            "clientKeyCertificate": {
                              "title": "Client Key Certificate",
                              "description": "Client Key Certificate.",
                              "type": "string"
                            },
                            "rootCertificate": {
                              "title": "Root Certificate",
                              "description": "Root Certificate.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "clientCertificate",
                            "clientKeyCertificate",
                            "rootCertificate"
                          ]
                        },
                        "qlikCertificateValues": {
                          "description": "Qlik Authentication Certificate By Values",
                          "title": "Qlik Certificates By Values",
                          "type": "object",
                          "properties": {
                            "sslConfig": {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                            }
                          },
                          "required": [
                            "sslConfig"
                          ]
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/11/definitions/qlikSenseType",
                          "default": "QlikSense"
                        },
                        "displayUrl": {
                          "expose": true,
                          "title": "Qlik Sense Base URL",
                          "description": "Qlik Sense Base URL, used for genrating dashboard & chat url",
                          "type": "string",
                          "format": "uri"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Qlik Engine JSON API Websocket URL",
                          "description": "URL for the Qlik instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "certificates": {
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/11/definitions/qlikCertificateValues"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/11/definitions/qlikCertificatePath"
                            }
                          ]
                        },
                        "validateHostName": {
                          "title": "Validate Host Name",
                          "description": "Validate Host Name",
                          "type": "boolean",
                          "default": false
                        },
                        "userDirectory": {
                          "title": "User Directory",
                          "description": "User Directory.",
                          "type": "string"
                        },
                        "userId": {
                          "title": "User ID",
                          "description": "User ID.",
                          "type": "string"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "certificates"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "LightdashConnection",
                      "description": "Lightdash Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.LightdashConnection",
                      "definitions": {
                        "lightdashType": {
                          "description": "Lightdash service type",
                          "type": "string",
                          "enum": [
                            "Lightdash"
                          ],
                          "default": "Lightdash"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/12/definitions/lightdashType",
                          "default": "Lightdash"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host Port",
                          "description": "Address for your running Lightdash instance",
                          "type": "string",
                          "format": "uri",
                          "default": "http://localhost:5000"
                        },
                        "apiKey": {
                          "title": "API Key",
                          "description": "The personal access token you can generate in the Lightdash app under the user settings",
                          "type": "string",
                          "format": "password"
                        },
                        "projectUUID": {
                          "title": "Project UUID",
                          "description": "The Project UUID for your Lightdash instance",
                          "type": "string"
                        },
                        "spaceUUID": {
                          "title": "Space UUID",
                          "description": "The Space UUID for your Lightdash instance",
                          "type": "string"
                        },
                        "proxyAuthentication": {
                          "title": "Proxy Authentication",
                          "description": "Use if your Lightdash instance is behind a proxy like (Cloud IAP)",
                          "type": "string",
                          "format": "password"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "apiKey",
                        "projectUUID",
                        "spaceUUID"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MicroStrategyConnection",
                      "description": "MicroStrategy Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.MicroStrategyConnection",
                      "definitions": {
                        "microStrategyType": {
                          "description": "MicroStrategy service type",
                          "type": "string",
                          "enum": [
                            "MicroStrategy"
                          ],
                          "default": "MicroStrategy"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/13/definitions/microStrategyType",
                          "default": "MicroStrategy"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MicroStrategy. This user should have privileges to read all the metadata in MicroStrategy.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MicroStrategy.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and Port of the MicroStrategy instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "projectName": {
                          "title": "Project Name",
                          "description": "MicroStrategy Project Name",
                          "type": "string"
                        },
                        "loginMode": {
                          "title": "Login Mode",
                          "description": "Login Mode for Microstrategy's REST API connection. You can authenticate with one of the following authentication modes: `Standard (1)`, `Anonymous (8)`. Default will be `Standard (1)`. If you're using demo account for Microstrategy, it will be needed to authenticate through loginMode `8`.",
                          "type": "string",
                          "default": "1"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "password"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "QlikCloudConnection",
                      "description": "Qlik Cloud Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.QlikCloudConnection",
                      "definitions": {
                        "qlikCloudType": {
                          "description": "Qlik Cloud service type",
                          "type": "string",
                          "enum": [
                            "QlikCloud"
                          ],
                          "default": "QlikCloud"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/14/definitions/qlikCloudType",
                          "default": "QlikCloud"
                        },
                        "token": {
                          "title": "token",
                          "description": "token to connect to Qlik Cloud.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and Port of the Qlik Cloud instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SigmaConnection",
                      "description": "Sigma Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.dashboard.SigmaConnection",
                      "definitions": {
                        "sigmaType": {
                          "description": "Sigma service type",
                          "type": "string",
                          "enum": [
                            "Sigma"
                          ],
                          "default": "Sigma"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/15/definitions/sigmaType",
                          "default": "Sigma"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Sigma API url.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://api.sigmacomputing.com"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "client_id for Sigma.",
                          "type": "string"
                        },
                        "clientSecret": {
                          "title": "Client Secret",
                          "description": "clientSecret for Sigma.",
                          "type": "string",
                          "format": "password"
                        },
                        "apiVersion": {
                          "title": "API Version",
                          "description": "Sigma API version.",
                          "type": "string",
                          "default": "v2"
                        },
                        "dashboardFilterPattern": {
                          "description": "Regex to exclude or include dashboards that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Dashboard Filter Pattern"
                        },
                        "chartFilterPattern": {
                          "description": "Regex exclude or include charts that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Chart Filter Pattern"
                        },
                        "dataModelFilterPattern": {
                          "description": "Regex exclude or include data models that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Data Model Filter Pattern"
                        },
                        "projectFilterPattern": {
                          "description": "Regex to exclude or include projects that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Project Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "clientId",
                        "clientSecret"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "description": "Database Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "BigQueryConnection",
                      "description": "Google BigQuery Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.BigQueryConnection",
                      "definitions": {
                        "bigqueryType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "BigQuery"
                          ],
                          "default": "BigQuery"
                        },
                        "bigqueryScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "bigquery"
                          ],
                          "default": "bigquery"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/definitions/bigqueryType",
                          "default": "BigQuery"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/definitions/bigqueryScheme",
                          "default": "bigquery"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "BigQuery APIs URL.",
                          "type": "string",
                          "default": "bigquery.googleapis.com"
                        },
                        "credentials": {
                          "title": "GCP Credentials",
                          "description": "GCP Credentials",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.credentials.GCPCredentials",
                          "definitions": {
                            "gcpADC": {
                              "title": "GCP Application Default Credentials",
                              "description": "Use the application default credentials",
                              "type": "object",
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Google Cloud Platform ADC ( Application Default Credentials )",
                                  "type": "string",
                                  "default": "gcp_adc",
                                  "const": "gcp_adc"
                                },
                                "projectId": {
                                  "title": "GCP Project ID",
                                  "description": "GCP Project ID to parse metadata from",
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/singleProjectId"
                                    },
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/multipleProjectId"
                                    }
                                  ],
                                  "default": null
                                }
                              }
                            },
                            "gcpCredentialsPath": {
                              "title": "GCP Credentials Path",
                              "description": "Pass the path of file containing the GCP credentials info",
                              "type": "object",
                              "properties": {
                                "type": {
                                  "title": "Credentials Type",
                                  "description": "Google Cloud Platform account type.",
                                  "type": "string",
                                  "default": "gcp_credential_path",
                                  "const": "gcp_credential_path"
                                },
                                "path": {
                                  "title": "Path",
                                  "description": "Path of the file containing the GCP credentials info",
                                  "type": "string"
                                },
                                "projectId": {
                                  "title": "GCP Project ID",
                                  "description": "GCP Project ID to parse metadata from",
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/singleProjectId"
                                    },
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/multipleProjectId"
                                    }
                                  ],
                                  "default": null
                                }
                              }
                            },
                            "GCPImpersonateServiceAccountValues": {
                              "title": "GCP impersonate service account values",
                              "description": "Pass the values to impersonate a service account of Google Cloud",
                              "type": "object",
                              "properties": {
                                "impersonateServiceAccount": {
                                  "title": "Target Service Account Email",
                                  "description": "The impersonated service account email",
                                  "type": "string"
                                },
                                "lifetime": {
                                  "title": "Lifetime",
                                  "description": "Number of seconds the delegated credential should be valid",
                                  "type": "integer",
                                  "default": 3600
                                }
                              }
                            }
                          },
                          "properties": {
                            "gcpConfig": {
                              "title": "GCP Credentials Configuration",
                              "description": "We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path",
                              "oneOf": [
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.security.credentials.GCPValues",
                                  "title": "GCP Credentials Values",
                                  "description": "Pass the raw credential values provided by GCP",
                                  "definitions": {
                                    "singleProjectId": {
                                      "title": "Single Project ID",
                                      "type": "string"
                                    },
                                    "multipleProjectId": {
                                      "title": "Multiple Project ID",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "properties": {
                                    "type": {
                                      "title": "Credentials Type",
                                      "description": "Google Cloud Platform account type.",
                                      "type": "string",
                                      "default": "service_account",
                                      "const": "service_account"
                                    },
                                    "projectId": {
                                      "title": "Project ID",
                                      "description": "Project ID",
                                      "oneOf": [
                                        {
                                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/singleProjectId"
                                        },
                                        {
                                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/properties/gcpConfig/oneOf/0/definitions/multipleProjectId"
                                        }
                                      ]
                                    },
                                    "privateKeyId": {
                                      "title": "Private Key ID",
                                      "description": "Google Cloud private key id.",
                                      "type": "string"
                                    },
                                    "privateKey": {
                                      "title": "Private Key",
                                      "description": "Google Cloud private key.",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "clientEmail": {
                                      "title": "Client Email",
                                      "description": "Google Cloud email.",
                                      "type": "string"
                                    },
                                    "clientId": {
                                      "title": "Client ID",
                                      "description": "Google Cloud Client ID.",
                                      "type": "string"
                                    },
                                    "authUri": {
                                      "title": "Authentication URI",
                                      "description": "Google Cloud auth uri.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://accounts.google.com/o/oauth2/auth"
                                    },
                                    "tokenUri": {
                                      "title": "Token URI",
                                      "description": "Google Cloud token uri.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://oauth2.googleapis.com/token"
                                    },
                                    "authProviderX509CertUrl": {
                                      "title": "Authentication Provider x509 Certificate URL",
                                      "description": "Google Cloud auth provider certificate.",
                                      "type": "string",
                                      "format": "uri",
                                      "default": "https://www.googleapis.com/oauth2/v1/certs"
                                    },
                                    "clientX509CertUrl": {
                                      "title": "Client x509 Certificate URL",
                                      "description": "Google Cloud client certificate uri.",
                                      "type": "string",
                                      "format": "uri"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/definitions/gcpCredentialsPath"
                                },
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.security.credentials.GCPExternalAccount",
                                  "title": "GCP External Account",
                                  "description": "Pass the raw credential values provided by GCP",
                                  "properties": {
                                    "type": {
                                      "title": "Credentials Type",
                                      "description": "Google Cloud Platform account type.",
                                      "type": "string",
                                      "default": "external_account",
                                      "const": "external_account"
                                    },
                                    "externalType": {
                                      "title": "GCP Account Type",
                                      "description": "Google Cloud Platform account type.",
                                      "type": "string",
                                      "default": "external_account",
                                      "const": "external_account"
                                    },
                                    "audience": {
                                      "title": "Audience",
                                      "description": "Google Security Token Service audience which contains the resource name for the workload identity pool and the provider identifier in that pool.",
                                      "type": "string"
                                    },
                                    "subjectTokenType": {
                                      "title": "Subject Token Type",
                                      "description": "Google Security Token Service subject token type based on the OAuth 2.0 token exchange spec.",
                                      "type": "string"
                                    },
                                    "tokenURL": {
                                      "title": "Token URL",
                                      "description": "Google Security Token Service token exchange endpoint.",
                                      "type": "string"
                                    },
                                    "credentialSource": {
                                      "title": "Credential Source",
                                      "description": "This object defines the mechanism used to retrieve the external credential from the local environment so that it can be exchanged for a GCP access token via the STS endpoint",
                                      "type": "object",
                                      "javaType": "org.openmetadata.schema.security.credentials.credentialSource",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/definitions/gcpADC"
                                }
                              ]
                            },
                            "gcpImpersonateServiceAccount": {
                              "title": "GCP Impersonate Service Account Configuration",
                              "description": "we enable the authenticated service account to impersonate another service account",
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials/definitions/GCPImpersonateServiceAccountValues"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "gcpConfig"
                          ]
                        },
                        "taxonomyProjectID": {
                          "title": "Taxonomy Project IDs",
                          "description": "Project IDs used to fetch policy tags",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": null
                        },
                        "taxonomyLocation": {
                          "title": "Taxonomy Location",
                          "description": "Taxonomy location used to fetch policy tags",
                          "type": "string",
                          "default": "us"
                        },
                        "usageLocation": {
                          "title": "Usage Location",
                          "description": "Location used to query INFORMATION_SCHEMA.JOBS_BY_PROJECT to fetch usage data. You can pass multi-regions, such as `us` or `eu`, or you specific region. Australia and Asia multi-regions are not yet in GA.",
                          "type": "string",
                          "default": "us"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsIncrementalMetadataExtraction": {
                          "title": "Supports Incremental Metadata Extraction",
                          "description": "Supports Incremental Metadata Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsUsageExtraction": {
                          "description": "Supports Usage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsLineageExtraction": {
                          "description": "Supports Lineage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsDBTExtraction": {
                          "description": "Supports DBT Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "description": "Supports Profiler",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "description": "The source service supports the database concept in its hierarchy",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsSystemProfile": {
                          "title": "Supports System Profile",
                          "description": "The source database supports system profiles for tables such as last update.",
                          "type": "boolean",
                          "default": false
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "description": "Storage config to store sample data",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.services.connections.database.SampleDataStorageConfig",
                          "properties": {
                            "config": {
                              "oneOf": [
                                {
                                  "title": "Sample Data Storage Config",
                                  "description": "Storage config to store sample data",
                                  "type": "object",
                                  "properties": {
                                    "bucketName": {
                                      "title": "Bucket Name",
                                      "description": "Bucket Name",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "prefix": {
                                      "title": "Prefix",
                                      "description": "Prefix of the data source.",
                                      "type": "string",
                                      "default": ""
                                    },
                                    "filePathPattern": {
                                      "title": "File Path Pattern",
                                      "description": "Provide the pattern of the path where the generated sample data file needs to be stored.",
                                      "type": "string",
                                      "default": "{service_name}/{database_name}/{database_schema_name}/{table_name}/sample_data.parquet"
                                    },
                                    "overwriteData": {
                                      "title": "Overwrite Sample Data",
                                      "description": "When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day",
                                      "type": "boolean",
                                      "default": true
                                    },
                                    "storageConfig": {
                                      "oneOf": [
                                        {
                                          "title": "AWS S3 Storage Config",
                                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                        },
                                        {
                                          "title": "OpenMetadata Storage",
                                          "type": "object",
                                          "additionalProperties": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "title": "No Sample Data Storage Config",
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "description": "Supports the data diff data qualty specification.",
                          "type": "boolean",
                          "default": true
                        },
                        "costPerTB": {
                          "title": "Cost Per TiB",
                          "description": "Cost per TiB for BigQuery usage",
                          "type": "number",
                          "default": 6.25
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "BigTableConnection",
                      "description": "Google BigTable Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.BigTableConnection",
                      "definitions": {
                        "bigtableType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "BigTable"
                          ],
                          "default": "BigTable"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/1/definitions/bigtableType",
                          "default": "BigTable"
                        },
                        "credentials": {
                          "title": "GCP Credentials",
                          "description": "GCP Credentials",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AthenaConnection",
                      "description": "AWS Athena Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.AthenaConnection",
                      "definitions": {
                        "athenaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Athena"
                          ],
                          "default": "Athena"
                        },
                        "athenaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "awsathena+rest"
                          ],
                          "default": "awsathena+rest"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/2/definitions/athenaType",
                          "default": "Athena"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/2/definitions/athenaScheme",
                          "default": "awsathena+rest"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "s3StagingDir": {
                          "title": "S3 Staging Directory",
                          "description": "S3 Staging Directory. Example: s3://postgres/input/",
                          "type": "string",
                          "format": "uri"
                        },
                        "workgroup": {
                          "title": "Athena Workgroup",
                          "description": "Athena workgroup.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsUsageExtraction": {
                          "description": "Supports Usage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsLineageExtraction": {
                          "description": "Supports Lineage Extraction.",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "s3StagingDir",
                        "awsConfig",
                        "workgroup"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AzureSQLConnection",
                      "description": "Azure SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.AzureSQLConnection",
                      "definitions": {
                        "azureSQLType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "AzureSQL"
                          ],
                          "default": "AzureSQL"
                        },
                        "azureSQLScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mssql+pyodbc"
                          ],
                          "default": "mssql+pyodbc"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/3/definitions/azureSQLType",
                          "default": "AzureSQL"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/3/definitions/azureSQLScheme",
                          "default": "mssql+pyodbc"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to AzureSQL. This user should have privileges to read the metadata.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to AzureSQL.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the AzureSQL service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "driver": {
                          "title": "Driver",
                          "description": "SQLAlchemy driver for AzureSQL.",
                          "type": "string",
                          "default": "ODBC Driver 18 for SQL Server"
                        },
                        "authenticationMode": {
                          "title": "Authentication Mode",
                          "description": "This parameter determines the mode of authentication for connecting to AzureSQL using ODBC. If 'Active Directory Password' is selected, you need to provide the password. If 'Active Directory Integrated' is selected, password is not required as it uses the logged-in user's credentials. This mode is useful for establishing secure and seamless connections with AzureSQL.",
                          "properties": {
                            "authentication": {
                              "title": "Authentication",
                              "description": "Authentication from Connection String for AzureSQL.",
                              "type": "string",
                              "enum": [
                                "ActiveDirectoryIntegrated",
                                "ActiveDirectoryPassword"
                              ]
                            },
                            "encrypt": {
                              "title": "Encrypt",
                              "description": "Encrypt from Connection String for AzureSQL.",
                              "type": "boolean"
                            },
                            "trustServerCertificate": {
                              "title": "Trust Server Certificate",
                              "description": "Trust Server Certificate from Connection String for AzureSQL.",
                              "type": "boolean"
                            },
                            "connectionTimeout": {
                              "title": "Connection Timeout",
                              "description": "Connection Timeout from Connection String for AzureSQL.",
                              "type": "integer",
                              "default": 30
                            }
                          }
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Azuresql. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "title": "Supports Usage Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "title": "Supports Lineage Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "database",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ClickhouseConnection",
                      "description": "Clickhouse Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.ClickhouseConnection",
                      "definitions": {
                        "clickhouseType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Clickhouse"
                          ],
                          "default": "Clickhouse"
                        },
                        "clickhouseScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "clickhouse+http",
                            "clickhouse+native"
                          ],
                          "default": "clickhouse+http"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/4/definitions/clickhouseType",
                          "default": "Clickhouse"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/4/definitions/clickhouseScheme",
                          "default": "clickhouse+http"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Clickhouse. This user should have privileges to read all the metadata in Clickhouse.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Clickhouse.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Clickhouse service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "duration": {
                          "title": "Duration",
                          "description": "Clickhouse SQL connection duration.",
                          "type": "integer"
                        },
                        "https": {
                          "title": "Use HTTPS Protocol",
                          "description": "Use HTTPS Protocol for connection with clickhouse",
                          "type": "boolean"
                        },
                        "secure": {
                          "title": "Secure Connection",
                          "description": "Establish secure connection with clickhouse",
                          "type": "boolean"
                        },
                        "keyfile": {
                          "title": "Key File Path",
                          "description": "Path to key file for establishing secure connection",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatabricksConnection",
                      "description": "Databricks Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DatabricksConnection",
                      "definitions": {
                        "databricksType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Databricks"
                          ],
                          "default": "Databricks"
                        },
                        "databricksScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "databricks+connector"
                          ],
                          "default": "databricks+connector"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/5/definitions/databricksType",
                          "default": "Databricks"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/5/definitions/databricksScheme",
                          "default": "databricks+connector"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Databricks service.",
                          "type": "string"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to Databricks.",
                          "type": "string",
                          "format": "password"
                        },
                        "httpPath": {
                          "title": "Http Path",
                          "description": "Databricks compute resources URL.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Catalog of the data source(Example: hive_metastore). This is optional parameter, if you would like to restrict the metadata reading to a single catalog. When left blank, OpenMetadata Ingestion attempts to scan all the catalog.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionTimeout": {
                          "title": "Connection Timeout",
                          "description": "The maximum amount of time (in seconds) to wait for a successful connection to the data source. If the connection attempt takes longer than this timeout period, an error will be returned.",
                          "type": "integer",
                          "default": 120
                        },
                        "queryHistoryTable": {
                          "title": "Query History Table",
                          "description": "Table name to fetch the query history.",
                          "type": "string",
                          "default": "system.query.history"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^system$"
                              ]
                            }
                          }
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Db2Connection",
                      "description": "Db2 Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.Db2Connection",
                      "definitions": {
                        "db2Type": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Db2"
                          ],
                          "default": "Db2"
                        },
                        "db2Scheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "db2+ibm_db",
                            "ibmi"
                          ],
                          "default": "db2+ibm_db"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/definitions/db2Type",
                          "default": "Db2"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/definitions/db2Scheme",
                          "default": "db2+ibm_db"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to DB2. This user should have privileges to read all the metadata in DB2.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to DB2.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the DB2 service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "database",
                          "description": "Database of the data source.",
                          "type": "string"
                        },
                        "licenseFileName": {
                          "title": "License File Name",
                          "description": "License file name to connect to DB2.",
                          "type": "string"
                        },
                        "license": {
                          "title": "License",
                          "description": "License to connect to DB2.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "description": "Supports View Lineage Extraction.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DeltaLakeConnection",
                      "description": "DeltaLake Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DeltaLakeConnection",
                      "definitions": {
                        "deltaLakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DeltaLake"
                          ],
                          "default": "DeltaLake"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/7/definitions/deltaLakeType",
                          "default": "DeltaLake"
                        },
                        "configSource": {
                          "title": "DeltaLake Configuration Source",
                          "description": "Available sources to fetch the metadata.",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "MetastoreConfig",
                              "description": "Deltalake Metastore configuration.",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.deltalake.MetastoreConfig",
                              "definitions": {
                                "metastoreHostPortConnection": {
                                  "title": "Hive Metastore Service",
                                  "type": "object",
                                  "properties": {
                                    "metastoreHostPort": {
                                      "title": "Hive Metastore Service",
                                      "description": "Thrift connection to the metastore service. E.g., localhost:9083",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "metastoreDbConnection": {
                                  "title": "Hive Metastore Database",
                                  "type": "object",
                                  "properties": {
                                    "metastoreDb": {
                                      "title": "Hive Metastore Database",
                                      "description": "JDBC connection to the metastore database. E.g., jdbc:mysql://localhost:3306/demo_hive",
                                      "type": "string"
                                    },
                                    "username": {
                                      "title": "Connection UserName",
                                      "description": "Username to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionUserName sparks property.",
                                      "type": "string"
                                    },
                                    "password": {
                                      "title": "Connection Password",
                                      "description": "Password to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionPassword sparks property.",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "driverName": {
                                      "title": "Connection Driver Name",
                                      "description": "Driver class name for JDBC metastore. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionDriverName sparks property. E.g., org.mariadb.jdbc.Driver",
                                      "type": "string"
                                    },
                                    "jdbcDriverClassPath": {
                                      "title": "JDBC Driver Class Path",
                                      "description": "Class path to JDBC driver required for JDBC connection. The value will be mapped as spark.driver.extraClassPath sparks property.",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "metastoreFilePathConnection": {
                                  "title": "Hive Metastore File Path",
                                  "type": "object",
                                  "properties": {
                                    "metastoreFilePath": {
                                      "title": "Hive Metastore File Path",
                                      "description": "Local path for the local file with metastore data. E.g., /tmp/metastore.db",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "properties": {
                                "connection": {
                                  "title": "Connection",
                                  "description": "Metastore connection configuration, depending on your metastore type.",
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/7/properties/configSource/oneOf/0/definitions/metastoreHostPortConnection"
                                    },
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/7/properties/configSource/oneOf/0/definitions/metastoreDbConnection"
                                    },
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/7/properties/configSource/oneOf/0/definitions/metastoreFilePathConnection"
                                    }
                                  ]
                                },
                                "appName": {
                                  "title": "Application Name",
                                  "description": "pySpark App Name.",
                                  "type": "string",
                                  "default": "OpenMetadata"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "connection"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "StorageConfig",
                              "description": "DeltaLake Storage Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.deltalake.StorageConfig",
                              "definitions": {
                                "localConfig": {
                                  "title": "Local Config",
                                  "description": "Local config source where no extra information needs to be sent.",
                                  "type": "object",
                                  "additionalProperties": false
                                }
                              },
                              "properties": {
                                "connection": {
                                  "title": "DeltaLake Storage Configuration Source",
                                  "description": "Available sources to fetch files.",
                                  "oneOf": [
                                    {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/27/properties/configSource/oneOf/3"
                                    }
                                  ]
                                },
                                "bucketName": {
                                  "title": "Bucket Name",
                                  "description": "Bucket Name of the data source.",
                                  "type": "string",
                                  "default": ""
                                },
                                "prefix": {
                                  "title": "Prefix",
                                  "description": "Prefix of the data source.",
                                  "type": "string",
                                  "default": ""
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "connection"
                              ]
                            }
                          ]
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "description": "If using Metastore, Key-Value pairs that will be used to add configs to the SparkSession.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "configSource"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DruidConnection",
                      "description": "Druid Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DruidConnection",
                      "definitions": {
                        "druidType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Druid"
                          ],
                          "default": "Druid"
                        },
                        "druidScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "druid"
                          ],
                          "default": "druid"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/8/definitions/druidType",
                          "default": "Druid"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/8/definitions/druidScheme",
                          "default": "druid"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Druid. This user should have privileges to read all the metadata in Druid.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Druid.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Druid service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DynamoDBConnection",
                      "description": "DynamoDB Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DynamoDBConnection",
                      "definitions": {
                        "dynamoDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DynamoDB"
                          ],
                          "default": "DynamoDB"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/9/definitions/dynamoDBType",
                          "default": "DynamoDB"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GlueConnection",
                      "description": "Glue Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.GlueConnection",
                      "definitions": {
                        "glueType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Glue"
                          ],
                          "default": "Glue"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/10/definitions/glueType",
                          "default": "Glue"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "HiveConnection",
                      "description": "Hive SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.HiveConnection",
                      "definitions": {
                        "hiveType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Hive"
                          ],
                          "default": "Hive"
                        },
                        "hiveScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "hive",
                            "hive+http",
                            "hive+https"
                          ],
                          "default": "hive"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/11/definitions/hiveType",
                          "default": "Hive"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/11/definitions/hiveScheme",
                          "default": "hive"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Hive. This user should have privileges to read all the metadata in Hive.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Hive.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Hive service.",
                          "type": "string"
                        },
                        "auth": {
                          "title": "Authentication Mode",
                          "description": "Authentication mode to connect to hive.",
                          "type": "string",
                          "enum": [
                            "NONE",
                            "LDAP",
                            "KERBEROS",
                            "CUSTOM",
                            "NOSASL",
                            "BASIC",
                            "GSSAPI",
                            "JWT",
                            "PLAIN"
                          ],
                          "default": "NONE"
                        },
                        "kerberosServiceName": {
                          "title": "Kerberos Service Name",
                          "description": "If authenticating with Kerberos specify the Kerberos service name",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "authOptions": {
                          "title": "URL Authentication Options",
                          "description": "Authentication options to pass to Hive connector. These options are based on SQLAlchemy.",
                          "type": "string"
                        },
                        "metastoreConnection": {
                          "title": "Hive Metastore Connection Details",
                          "description": "Hive Metastore Connection Details",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15"
                            },
                            {
                              "title": "None",
                              "type": "object",
                              "additionalProperties": false
                            }
                          ]
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ImpalaConnection",
                      "description": "Impala SQL Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.ImpalaConnection",
                      "definitions": {
                        "impalaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Impala"
                          ],
                          "default": "Impala"
                        },
                        "impalaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "impala",
                            "impala4"
                          ],
                          "default": "impala"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/12/definitions/impalaType",
                          "default": "Impala"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/12/definitions/impalaScheme",
                          "default": "impala"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Impala. This user should have privileges to read all the metadata in Impala.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Impala.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Impala service.",
                          "type": "string"
                        },
                        "authMechanism": {
                          "title": "Authentication Mode",
                          "description": "Authentication mode to connect to Impala.",
                          "type": "string",
                          "enum": [
                            "NOSASL",
                            "PLAIN",
                            "GSSAPI",
                            "LDAP",
                            "JWT"
                          ],
                          "default": "PLAIN"
                        },
                        "kerberosServiceName": {
                          "title": "Kerberos Service Name",
                          "description": "If authenticating with Kerberos specify the Kerberos service name",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "useSSL": {
                          "title": "Use SSL",
                          "description": "Establish secure connection with Impala",
                          "type": "boolean"
                        },
                        "authOptions": {
                          "title": "URL Authentication Options",
                          "description": "Authentication options to pass to Impala connector. These options are based on SQLAlchemy.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MariaDBConnection",
                      "description": "MariaDB Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MariaDBConnection",
                      "definitions": {
                        "mariaDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "MariaDB"
                          ],
                          "default": "MariaDB"
                        },
                        "mariaDBScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/13/definitions/mariaDBType",
                          "default": "MariaDB"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/13/definitions/mariaDBScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MariaDB. This user should have privileges to read all the metadata in MariaDB.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MariaDB.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MariaDB service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MssqlConnection",
                      "description": "Mssql Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MssqlConnection",
                      "definitions": {
                        "mssqlType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mssql"
                          ],
                          "default": "Mssql"
                        },
                        "mssqlScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mssql+pyodbc",
                            "mssql+pytds",
                            "mssql+pymssql"
                          ],
                          "default": "mssql+pytds"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/14/definitions/mssqlType",
                          "default": "Mssql"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/14/definitions/mssqlScheme",
                          "default": "mssql+pytds"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MSSQL.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MSSQL service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "driver": {
                          "title": "Driver",
                          "description": "ODBC driver version in case of pyodbc connection.",
                          "type": "string",
                          "default": "ODBC Driver 18 for SQL Server"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Mssql. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^db_.*",
                                "^guest$",
                                "^information_schema$",
                                "^sys$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^msdb$",
                                "^model$",
                                "^tempdb$"
                              ]
                            }
                          }
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MysqlConnection",
                      "description": "Mysql Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MysqlConnection",
                      "definitions": {
                        "mySQLType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mysql"
                          ],
                          "default": "Mysql"
                        },
                        "mySQLScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/definitions/mySQLType",
                          "default": "Mysql"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/definitions/mySQLScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "mask": true,
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Basic Auth",
                              "description": "Common Database Connection Config",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.basicAuth",
                              "type": "object",
                              "properties": {
                                "password": {
                                  "title": "Password",
                                  "description": "Password to connect to source.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "IAM Auth Configuration Source",
                              "description": "IAM Auth Database Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.IamAuthConfig",
                              "properties": {
                                "awsConfig": {
                                  "title": "AWS Credentials Configuration",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Azure Configuration Source",
                              "description": "Azure Database Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.AzureConfig",
                              "properties": {
                                "azureConfig": {
                                  "title": "Azure Credentials Configuration",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/properties/credentials"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MySQL service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "sslConfig": {
                          "title": "SSL",
                          "description": "SSL Configuration details.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$",
                                "^performance_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SQLiteConnection",
                      "description": "SQLite Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SQLiteConnection",
                      "definitions": {
                        "SQLiteType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SQLite"
                          ],
                          "default": "SQLite"
                        },
                        "SQLiteScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "sqlite+pysqlite"
                          ],
                          "default": "sqlite+pysqlite"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/16/definitions/SQLiteType",
                          "default": "SQLite"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/16/definitions/SQLiteScheme",
                          "default": "sqlite+pysqlite"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to SQLite. Blank for in-memory database.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to SQLite. Blank for in-memory database.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the SQLite service. Blank for in-memory database.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "databaseMode": {
                          "title": "Database Mode",
                          "description": "How to run the SQLite database. :memory: by default.",
                          "type": "string",
                          "default": ":memory:"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OracleConnection",
                      "description": "Oracle Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.OracleConnection",
                      "definitions": {
                        "oracleType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Oracle"
                          ],
                          "default": "Oracle"
                        },
                        "oracleScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "oracle+cx_oracle"
                          ],
                          "default": "oracle+cx_oracle"
                        },
                        "OracleDatabaseSchema": {
                          "title": "Database Schema",
                          "type": "object",
                          "properties": {
                            "databaseSchema": {
                              "title": "DatabaseSchema",
                              "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "databaseSchema"
                          ]
                        },
                        "OracleServiceName": {
                          "title": "Oracle Service Name",
                          "type": "object",
                          "properties": {
                            "oracleServiceName": {
                              "title": "Oracle Service Name",
                              "description": "The Oracle Service name is the TNS alias that you give when you remotely connect to your database.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oracleServiceName"
                          ]
                        },
                        "OracleTNSConnection": {
                          "title": "Oracle TNS Connection",
                          "type": "object",
                          "properties": {
                            "oracleTNSConnection": {
                              "title": "Oracle TNS Connection String",
                              "description": "Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).",
                              "type": "string"
                            }
                          },
                          "required": [
                            "oracleTNSConnection"
                          ]
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/17/definitions/oracleType",
                          "default": "Oracle"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/17/definitions/oracleScheme",
                          "default": "oracle+cx_oracle"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Oracle. This user should have privileges to read all the metadata in Oracle.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Oracle.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Oracle service.",
                          "type": "string"
                        },
                        "oracleConnectionType": {
                          "title": "Oracle Connection Type",
                          "type": "object",
                          "description": "Connect with oracle by either passing service name or database schema name.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/17/definitions/OracleDatabaseSchema"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/17/definitions/OracleServiceName"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/17/definitions/OracleTNSConnection"
                            }
                          ]
                        },
                        "instantClientDirectory": {
                          "title": "Oracle instant client directory",
                          "type": "string",
                          "description": "This directory will be used to set the LD_LIBRARY_PATH env variable. It is required if you need to enable thick connection mode. By default, we bring instant client 19 and point to /instantclient.",
                          "default": "/instantclient"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^sys$",
                                "^ctxsys$",
                                "^dbsnmp$",
                                "^outln$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username",
                        "oracleConnectionType"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PostgresConnection",
                      "description": "Postgres Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PostgresConnection",
                      "definitions": {
                        "postgresType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Postgres"
                          ],
                          "default": "Postgres"
                        },
                        "postgresScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "postgresql+psycopg2",
                            "pgspider+psycopg2"
                          ],
                          "default": "postgresql+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/definitions/postgresType",
                          "default": "Postgres"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/definitions/postgresScheme",
                          "default": "postgresql+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "mask": true,
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/0"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/1"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/2"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the source service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^template1$",
                                "^template0$"
                              ]
                            }
                          }
                        },
                        "sslMode": {
                          "title": "SSL Mode",
                          "description": "SSL Mode to connect to database.",
                          "javaType": "org.openmetadata.schema.security.ssl.SSLMode",
                          "enum": [
                            "disable",
                            "allow",
                            "prefer",
                            "require",
                            "verify-ca",
                            "verify-full"
                          ],
                          "default": "disable"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "classificationName": {
                          "title": "Classification Name",
                          "description": "Custom OpenMetadata Classification name for Postgres policy tags.",
                          "type": "string",
                          "default": "PostgresPolicyTags"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PrestoConnection",
                      "description": "Presto Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PrestoConnection",
                      "definitions": {
                        "prestoType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Presto"
                          ],
                          "default": "Presto"
                        },
                        "prestoScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "presto"
                          ],
                          "default": "presto"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/19/definitions/prestoType",
                          "default": "Presto"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/19/definitions/prestoScheme",
                          "default": "presto"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Presto. This user should have privileges to read all the metadata in Postgres.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Presto.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Presto service.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Presto catalog",
                          "type": "string"
                        },
                        "protocol": {
                          "title": "Protocol",
                          "description": "Protocol ( Connection Argument ) to connect to Presto.",
                          "type": "string"
                        },
                        "verify": {
                          "title": "Verify",
                          "description": "Verify ( Connection Argument for SSL ) to connect to Presto.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedshiftConnection",
                      "description": "Redshift  Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.RedshiftConnection",
                      "definitions": {
                        "redshiftType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Redshift"
                          ],
                          "default": "Redshift"
                        },
                        "redshiftScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "redshift+psycopg2"
                          ],
                          "default": "redshift+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/20/definitions/redshiftType",
                          "default": "Redshift"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/20/definitions/redshiftScheme",
                          "default": "redshift+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Redshift. This user should have privileges to read all the metadata in Redshift.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Redshift.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Redshift service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Initial Redshift database to connect to. If you want to ingest all databases, set ingestAllDatabases to true.",
                          "type": "string"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Redshift. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^template1$"
                              ]
                            }
                          }
                        },
                        "sslMode": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/properties/sslMode"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsIncrementalMetadataExtraction": {
                          "title": "Supports Incremental Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsIncrementalMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsSystemProfile": {
                          "title": "Supports System Profile",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsSystemProfile"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SalesforceConnection",
                      "description": "Salesforce Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SalesforceConnection",
                      "definitions": {
                        "salesforceType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Salesforce"
                          ],
                          "default": "Salesforce"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/21/definitions/salesforceType",
                          "default": "Salesforce"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to the Salesforce. This user should have privileges to read all the metadata in Redshift.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to the Salesforce.",
                          "type": "string",
                          "format": "password"
                        },
                        "securityToken": {
                          "title": "Security Token",
                          "description": "Salesforce Security Token.",
                          "type": "string",
                          "format": "password"
                        },
                        "organizationId": {
                          "title": "Salesforce Organization ID",
                          "description": "Salesforce Organization ID is the unique identifier for your Salesforce identity",
                          "type": "string"
                        },
                        "sobjectName": {
                          "title": "Object Name",
                          "description": "Salesforce Object Name.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "salesforceApiVersion": {
                          "title": "Salesforce API Version",
                          "description": "API version of the Salesforce instance",
                          "type": "string",
                          "default": "42.0"
                        },
                        "salesforceDomain": {
                          "title": "Salesforce Domain",
                          "description": "Domain of Salesforce instance",
                          "type": "string",
                          "default": "login"
                        },
                        "sslConfig": {
                          "title": "SSL Configuration",
                          "description": "SSL Configuration details.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SingleStoreConnection",
                      "description": "SingleStore Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SingleStoreConnection",
                      "definitions": {
                        "singleStoreType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SingleStore"
                          ],
                          "default": "SingleStore"
                        },
                        "singleStoreScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mysql+pymysql"
                          ],
                          "default": "mysql+pymysql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/22/definitions/singleStoreType",
                          "default": "SingleStore"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/22/definitions/singleStoreScheme",
                          "default": "mysql+pymysql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to SingleStore. This user should have privileges to read all the metadata in MySQL.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to SingleStore.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the SingleStore service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SnowflakeConnection",
                      "description": "Snowflake Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SnowflakeConnection",
                      "definitions": {
                        "snowflakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Snowflake"
                          ],
                          "default": "Snowflake"
                        },
                        "snowflakeScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "snowflake"
                          ],
                          "default": "snowflake"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/23/definitions/snowflakeType",
                          "default": "Snowflake"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/23/definitions/snowflakeScheme",
                          "default": "snowflake"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Snowflake. This user should have privileges to read all the metadata in Snowflake.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Snowflake.",
                          "type": "string",
                          "format": "password"
                        },
                        "account": {
                          "title": "Account",
                          "description": "If the Snowflake URL is https://xyz1234.us-east-1.gcp.snowflakecomputing.com, then the account is xyz1234.us-east-1.gcp",
                          "type": "string"
                        },
                        "role": {
                          "title": "Role",
                          "description": "Snowflake Role.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "warehouse": {
                          "title": "Warehouse",
                          "description": "Snowflake warehouse.",
                          "type": "string"
                        },
                        "queryTag": {
                          "title": "Query Tag",
                          "description": "Session query tag used to monitor usage on snowflake. To use a query tag snowflake user should have enough privileges to alter the session.",
                          "type": "string"
                        },
                        "accountUsageSchema": {
                          "title": "Account Usage Schema Name",
                          "description": "Full name of the schema where the account usage data is stored.",
                          "type": "string",
                          "default": "SNOWFLAKE.ACCOUNT_USAGE"
                        },
                        "privateKey": {
                          "title": "Private Key",
                          "description": "Connection to Snowflake instance via Private Key",
                          "type": "string",
                          "format": "password"
                        },
                        "snowflakePrivatekeyPassphrase": {
                          "title": "Snowflake Passphrase Key",
                          "description": "Snowflake Passphrase Key used with Private Key",
                          "type": "string",
                          "format": "password"
                        },
                        "includeTransientTables": {
                          "title": "Include Transient Tables",
                          "description": "Optional configuration for ingestion of TRANSIENT tables, By default, it will skip the TRANSIENT tables.",
                          "type": "boolean",
                          "default": true
                        },
                        "clientSessionKeepAlive": {
                          "title": "Client Session Keep Alive",
                          "description": "Optional configuration for ingestion to keep the client session active in case the ingestion process runs for longer durations.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^snowflake$"
                              ]
                            }
                          }
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsIncrementalMetadataExtraction": {
                          "title": "Supports Incremental Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsIncrementalMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "supportsSystemProfile": {
                          "title": "Supports System Profile",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsSystemProfile"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        },
                        "creditCost": {
                          "title": "Cost of Credit",
                          "description": "Cost of credit for the Snowflake account.",
                          "type": "number",
                          "default": 3.3
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "username",
                        "account",
                        "warehouse"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "TrinoConnection",
                      "description": "Trino Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.TrinoConnection",
                      "definitions": {
                        "trinoType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Trino"
                          ],
                          "default": "Trino"
                        },
                        "trinoScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "trino"
                          ],
                          "default": "trino"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/24/definitions/trinoType",
                          "default": "Trino"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/24/definitions/trinoScheme",
                          "default": "trino"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Trino. This user should have privileges to read all the metadata in Trino.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/0"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "JWT Auth",
                              "description": "Common Database Connection Config",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.jwtAuth",
                              "type": "object",
                              "properties": {
                                "jwt": {
                                  "title": "JWT",
                                  "description": "JWT to connect to source.",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/2"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "No Config Authentication Types",
                              "javaType": "org.openmetadata.schema.services.connections.database.common.NoConfigAuthenticationTypes",
                              "description": "Database Authentication types not requiring config.",
                              "type": "string",
                              "enum": [
                                "OAuth2"
                              ],
                              "default": "OAuth2"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Trino service.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Catalog of the data source.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "databaseSchema",
                          "description": "databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.",
                          "type": "string"
                        },
                        "proxies": {
                          "title": "Proxies",
                          "description": "Proxies for the connection to Trino data source",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "verify": {
                          "title": "Verify",
                          "description": "Verify ( Connection Argument for SSL ) to connect to Trino.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "title": "Supports Usage Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "title": "Supports Lineage Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "VerticaConnection",
                      "description": "Vertica Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.VerticaConnection",
                      "definitions": {
                        "verticaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Vertica"
                          ],
                          "default": "Vertica"
                        },
                        "verticaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "vertica+vertica_python"
                          ],
                          "default": "vertica+vertica_python"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/25/definitions/verticaType",
                          "default": "Vertica"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/25/definitions/verticaScheme",
                          "default": "vertica+vertica_python"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Vertica. This user should have privileges to read all the metadata in Vertica.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Vertica.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Vertica service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "PinotDBConnection",
                      "description": "PinotDB Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.PinotDBConnection",
                      "definitions": {
                        "pinotDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "PinotDB"
                          ],
                          "default": "PinotDB"
                        },
                        "pinotDBScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "pinot",
                            "pinot+http",
                            "pinot+https"
                          ],
                          "default": "pinot"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/26/definitions/pinotDBType",
                          "default": "PinotDB"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/26/definitions/pinotDBScheme",
                          "default": "pinot"
                        },
                        "username": {
                          "title": "Username",
                          "description": "username to connect to the PinotDB. This user should have privileges to read all the metadata in PinotDB.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "password to connect to the PinotDB.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Pinot Broker Host and Port",
                          "description": "Host and port of the PinotDB Broker service.",
                          "type": "string"
                        },
                        "pinotControllerHost": {
                          "title": "Pinot Controller Host and Port",
                          "description": "Pinot Controller Host and Port of the data source.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "pinotControllerHost"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatalakeConnection",
                      "description": "Datalake Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DatalakeConnection",
                      "definitions": {
                        "datalakeType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Datalake"
                          ],
                          "default": "Datalake"
                        },
                        "localConfig": {
                          "title": "Local Config",
                          "description": "Local config source where no extra information needs to be sent.",
                          "type": "object",
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/27/definitions/datalakeType",
                          "default": "Datalake"
                        },
                        "configSource": {
                          "title": "DataLake Configuration Source",
                          "description": "Available sources to fetch files.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/27/definitions/localConfig"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AzureConfig",
                              "description": "Azure Datalake Storage will ingest files in container",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.AzureConfig",
                              "properties": {
                                "securityConfig": {
                                  "title": "Azure Datalake Config Source",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/properties/credentials"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "GCSConfig",
                              "description": "DataLake GCS storage will ingest metadata of files",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.GCSConfig",
                              "properties": {
                                "securityConfig": {
                                  "title": "DataLake GCS Security Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "S3Config",
                              "description": "DataLake S3 bucket will ingest metadata of files in bucket",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.datalake.S3Config",
                              "properties": {
                                "securityConfig": {
                                  "title": "DataLake S3 Security Config",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "bucketName": {
                          "title": "Bucket Name",
                          "description": "Bucket Name of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "prefix": {
                          "title": "Prefix",
                          "description": "Prefix of the data source.",
                          "type": "string",
                          "default": ""
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "configSource"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoDatabaseConnection",
                      "description": "Domo Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DomoDatabaseConnection",
                      "definitions": {
                        "domoDatabaseType": {
                          "description": " service type",
                          "type": "string",
                          "enum": [
                            "DomoDatabase"
                          ],
                          "default": "DomoDatabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/28/definitions/domoDatabaseType",
                          "default": "DomoDatabase"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret Token to connect DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomDatabaseConnection",
                      "description": "Custom Database Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CustomDatabaseConnection",
                      "definitions": {
                        "customDatabaseType": {
                          "title": "Service Type",
                          "description": "Custom database service type",
                          "type": "string",
                          "enum": [
                            "CustomDatabase"
                          ],
                          "default": "CustomDatabase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom database service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/29/definitions/customDatabaseType",
                          "default": "CustomDatabase"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SapHanaConnection",
                      "description": "Sap Hana Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SapHanaConnection",
                      "definitions": {
                        "sapHanaType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SapHana"
                          ],
                          "default": "SapHana"
                        },
                        "sapHanaScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "hana"
                          ],
                          "default": "hana"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/30/definitions/sapHanaType",
                          "default": "SapHana"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/30/definitions/sapHanaScheme",
                          "default": "hana"
                        },
                        "connection": {
                          "mask": true,
                          "title": "SAP Hana Connection",
                          "description": "Choose between Database connection or HDB User Store connection.",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "SapHanaSQLConnection",
                              "description": "Sap Hana Database SQL Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.sapHana.SapHanaSQLConnection",
                              "properties": {
                                "hostPort": {
                                  "title": "Host and Port",
                                  "description": "Host and port of the Hana service.",
                                  "type": "string"
                                },
                                "username": {
                                  "title": "Username",
                                  "description": "Username to connect to Hana. This user should have privileges to read all the metadata.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password to connect to Hana.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "databaseSchema": {
                                  "title": "Database Schema",
                                  "description": "Database Schema of the data source. This is an optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                                  "type": "string"
                                },
                                "database": {
                                  "title": "Database",
                                  "description": "Database of the data source.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "username",
                                "password",
                                "hostPort"
                              ]
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "SapHanaHDBConnection",
                              "description": "Sap Hana Database HDB User Store Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.database.sapHana.SapHanaHDBConnection",
                              "properties": {
                                "userKey": {
                                  "title": "User Key",
                                  "description": "HDB Store User Key generated from the command `hdbuserstore SET <KEY> <host:port> <USERNAME> <PASSWORD>`",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsDataDiff": {
                          "title": "Supports Data Diff Extraction.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDataDiff"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "connection"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MongoDBConnection",
                      "description": "MongoDB Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.MongoDBConnection",
                      "definitions": {
                        "mongoDBType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "MongoDB"
                          ],
                          "default": "MongoDB"
                        },
                        "mongoDBScheme": {
                          "description": "Mongo connection scheme options.",
                          "type": "string",
                          "enum": [
                            "mongodb",
                            "mongodb+srv"
                          ],
                          "default": "mongodb"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/31/definitions/mongoDBType",
                          "default": "MongoDB"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "Mongo connection scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/31/definitions/mongoDBScheme",
                          "default": "mongodb"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to MongoDB. This user should have privileges to read all the metadata in MongoDB.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to MongoDB.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the MongoDB service when using the `mongodb` connection scheme. Only host when using the `mongodb+srv` scheme.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "sslMode": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/properties/sslMode"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        }
                      },
                      "required": [
                        "hostPort"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CassandraConnection",
                      "description": "Cassandra Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CassandraConnection",
                      "definitions": {
                        "cassandraType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Cassandra"
                          ],
                          "default": "Cassandra"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/32/definitions/cassandraType",
                          "default": "Cassandra"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Cassandra. This user should have privileges to read all the metadata in Cassandra.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/0"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Cloud Config",
                              "description": "Configuration for connecting to DataStax Astra DB in the cloud.",
                              "javaType": "org.openmetadata.schema.services.connections.database.cassandra.CloudConfig",
                              "type": "object",
                              "properties": {
                                "cloudConfig": {
                                  "title": "DataStax Astra DB Configuration",
                                  "description": "Configuration for connecting to DataStax Astra DB in the cloud.",
                                  "type": "object",
                                  "properties": {
                                    "connectTimeout": {
                                      "title": "Connect Timeout",
                                      "description": "Timeout in seconds for establishing new connections to Cassandra.",
                                      "type": "integer"
                                    },
                                    "requestTimeout": {
                                      "title": "Request Timeout",
                                      "description": "Timeout in seconds for individual Cassandra requests.",
                                      "type": "integer"
                                    },
                                    "token": {
                                      "title": "Token",
                                      "description": "The Astra DB application token used for authentication.",
                                      "type": "string"
                                    },
                                    "secureConnectBundle": {
                                      "title": "Secure Connect Bundle",
                                      "description": "File path to the Secure Connect Bundle (.zip) used for a secure connection to DataStax Astra DB.",
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Cassandra service when using the `cassandra` connection scheme. Only host when using the `cassandra+srv` scheme.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "sslMode": {
                          "title": "SSL Mode",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/properties/sslMode"
                        },
                        "sslConfig": {
                          "title": "SSL Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "Couchbase Connection",
                      "description": "Couchbase Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CouchbaseConnection",
                      "definitions": {
                        "couchbaseType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Couchbase"
                          ],
                          "default": "Couchbase"
                        },
                        "couchbaseScheme": {
                          "description": "Couchbase driver scheme options.",
                          "type": "string",
                          "enum": [
                            "couchbase"
                          ],
                          "default": "couchbase"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/33/definitions/couchbaseType",
                          "default": "Couchbase"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "Couchbase driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/33/definitions/couchbaseScheme",
                          "default": "couchbase"
                        },
                        "bucket": {
                          "title": "Connection Bucket",
                          "description": "Couchbase connection Bucket options.",
                          "type": "string"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Couchbase. This user should have privileges to read all the metadata in Couchbase.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Couchbase.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostport": {
                          "title": "Hostport",
                          "description": "Hostname of the Couchbase service.",
                          "type": "string"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostport",
                        "username",
                        "password"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GreenplumConnection",
                      "description": "Greenplum Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.GreenplumConnection",
                      "definitions": {
                        "greenplumType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Greenplum"
                          ],
                          "default": "Greenplum"
                        },
                        "greenplumScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "postgresql+psycopg2"
                          ],
                          "default": "postgresql+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/34/definitions/greenplumType",
                          "default": "Greenplum"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/34/definitions/greenplumScheme",
                          "default": "postgresql+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Greenplum. This user should have privileges to read all the metadata in Greenplum.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/0"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/1"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the source service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "sslMode": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/properties/sslMode"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Greenplum. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DorisConnection",
                      "description": "Doris Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.DorisConnection",
                      "definitions": {
                        "dorisType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Doris"
                          ],
                          "default": "Doris"
                        },
                        "dorisScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "doris"
                          ],
                          "default": "doris"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/35/definitions/dorisType",
                          "default": "Doris"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/35/definitions/dorisScheme",
                          "default": "doris"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Doris. This user should have privileges to read all the metadata in Doris.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Doris.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Doris service.",
                          "type": "string"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "sslConfig": {
                          "title": "SSL",
                          "description": "SSL Configuration details.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "UnityCatalogConnection",
                      "description": "UnityCatalog Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.UnityCatalogConnection",
                      "definitions": {
                        "databricksType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "UnityCatalog"
                          ],
                          "default": "UnityCatalog"
                        },
                        "databricksScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "databricks+connector"
                          ],
                          "default": "databricks+connector"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/36/definitions/databricksType",
                          "default": "UnityCatalog"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/36/definitions/databricksScheme",
                          "default": "databricks+connector"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Databricks service.",
                          "type": "string"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to Databricks.",
                          "type": "string",
                          "format": "password"
                        },
                        "httpPath": {
                          "title": "Http Path",
                          "description": "Databricks compute resources URL.",
                          "type": "string"
                        },
                        "catalog": {
                          "title": "Catalog",
                          "description": "Catalog of the data source(Example: hive_metastore). This is optional parameter, if you would like to restrict the metadata reading to a single catalog. When left blank, OpenMetadata Ingestion attempts to scan all the catalog.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "connectionTimeout": {
                          "title": "Connection Timeout",
                          "description": "The maximum amount of time (in seconds) to wait for a successful connection to the data source. If the connection attempt takes longer than this timeout period, an error will be returned.",
                          "type": "integer",
                          "default": 120
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^information_schema$"
                              ]
                            }
                          }
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "type": "object",
                          "properties": {
                            "includes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": []
                            },
                            "excludes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "default": [
                                "^system$"
                              ]
                            }
                          }
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SASConnection",
                      "description": "SAS Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SASConnection",
                      "definitions": {
                        "sasType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SAS"
                          ],
                          "default": "SAS"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/37/definitions/sasType",
                          "default": "SAS"
                        },
                        "username": {
                          "description": "Username to connect to SAS Viya.",
                          "type": "string"
                        },
                        "password": {
                          "description": "Password to connect to SAS Viya",
                          "type": "string",
                          "format": "password"
                        },
                        "serverHost": {
                          "description": "Hostname of SAS Viya deployment.",
                          "type": "string",
                          "format": "uri"
                        },
                        "datatables": {
                          "description": "Enable datatables for ingestion",
                          "type": "boolean",
                          "default": true
                        },
                        "dataTablesCustomFilter": {
                          "title": "Custom Filter for datatables",
                          "description": "Custom filter for datatables",
                          "oneOf": [
                            {
                              "title": "No Custom Filter",
                              "description": "Don't include custom filter when ingesting metadata for datatables",
                              "type": "object"
                            },
                            {
                              "title": "Custom Filter",
                              "description": "Include custom filter when ingesting metadata for datatables",
                              "type": "string"
                            }
                          ]
                        },
                        "reports": {
                          "description": "Enable report for ingestion",
                          "type": "boolean",
                          "default": false
                        },
                        "reportsCustomFilter": {
                          "title": "Custom Filter for reports",
                          "description": "Custom filter for reports",
                          "oneOf": [
                            {
                              "title": "No Custom Filter",
                              "description": "Don't include custom filter when ingesting metadata for reports",
                              "type": "object"
                            },
                            {
                              "title": "Custom Filter",
                              "description": "Include custom filter when ingesting metadata for reports",
                              "type": "string"
                            }
                          ]
                        },
                        "dataflows": {
                          "description": "Enable dataflow for ingestion",
                          "type": "boolean",
                          "default": false
                        },
                        "dataflowsCustomFilter": {
                          "title": "Custom Filter for dataflows",
                          "description": "Custom filter for dataflows",
                          "oneOf": [
                            {
                              "title": "No Custom Filter",
                              "description": "Don't include custom filter when ingesting metadata for dataflows",
                              "type": "object"
                            },
                            {
                              "title": "Custom Filter",
                              "description": "Include custom filter when ingesting metadata for dataflows",
                              "type": "string"
                            }
                          ]
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        }
                      },
                      "required": [
                        "username",
                        "password",
                        "serverHost"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "IcebergConnection",
                      "description": "Iceberg Catalog Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.IcebergConnection",
                      "definitions": {
                        "icebergType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Iceberg"
                          ],
                          "default": "Iceberg"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/38/definitions/icebergType",
                          "default": "Iceberg"
                        },
                        "catalog": {
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "title": "IcebergCatalog",
                          "description": "Iceberg Catalog configuration.",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.services.connections.database.iceberg.IcebergCatalog",
                          "properties": {
                            "name": {
                              "title": "Name",
                              "description": "Catalog Name.",
                              "type": "string"
                            },
                            "connection": {
                              "title": "Connection",
                              "description": "Catalog connection configuration, depending on your catalog type.",
                              "oneOf": [
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "HiveCatalogConnection",
                                  "description": "Iceberg Hive Catalog configuration.",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.services.connections.database.iceberg.HiveCatalogConnection",
                                  "properties": {
                                    "uri": {
                                      "title": "URI",
                                      "description": "Uri to the Hive Metastore. Example: 'thrift://localhost:9083'",
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "fileSystem": {
                                      "$schema": "http://json-schema.org/draft-07/schema#",
                                      "title": "IcebergFileSystem",
                                      "description": "Iceberg File System configuration, based on where the Iceberg Warehouse is located.",
                                      "javaType": "org.openmetadata.schema.services.connections.database.iceberg.IcebergFileSystem",
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "oneOf": [
                                            {
                                              "title": "Local",
                                              "description": "Local File System.",
                                              "type": "null"
                                            },
                                            {
                                              "title": "AWS",
                                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                            },
                                            {
                                              "title": "Azure",
                                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/properties/credentials"
                                            }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false,
                                  "required": [
                                    "uri"
                                  ]
                                },
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "RestCatalogConnection",
                                  "description": "Iceberg REST Catalog configuration.",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.services.connections.database.iceberg.RestCatalogConnection",
                                  "properties": {
                                    "uri": {
                                      "title": "URI",
                                      "description": "Uri to the REST catalog. Example: 'http://rest-catalog/ws/'",
                                      "type": "string",
                                      "format": "uri"
                                    },
                                    "credential": {
                                      "title": "OAuth2 Credential",
                                      "description": "OAuth2 credential to use when initializing the catalog.",
                                      "type": "object",
                                      "properties": {
                                        "clientId": {
                                          "title": "Client ID",
                                          "description": "OAuth2 Client ID.",
                                          "type": "string",
                                          "format": "password"
                                        },
                                        "clientSecret": {
                                          "title": "Client Secret",
                                          "description": "OAuth2 Client Secret",
                                          "type": "string",
                                          "format": "password"
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "token": {
                                      "title": "Token",
                                      "description": "Berarer token to use for the 'Authorization' header.",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "ssl": {
                                      "title": "SSL",
                                      "description": "SSL Configuration details.",
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/0/properties/sslConfig/properties/certificates/oneOf/0"
                                    },
                                    "sigv4": {
                                      "title": "Sigv4",
                                      "description": "Sign requests to the REST Server using AWS SigV4 protocol.",
                                      "type": "object",
                                      "properties": {
                                        "signingRegion": {
                                          "title": "Signing AWS Region",
                                          "description": "AWS Region to use when SigV4 signs a request.",
                                          "type": "string"
                                        },
                                        "signingName": {
                                          "title": "Signing Name",
                                          "description": "The service signing name to use when SigV4 signs a request.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "fileSystem": {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/38/properties/catalog/properties/connection/oneOf/0/properties/fileSystem"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "required": [
                                    "uri"
                                  ]
                                },
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "GlueCatalogConnection",
                                  "description": "Iceberg Glue Catalog configuration.",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.services.connections.database.iceberg.GlueCatalogConnection",
                                  "properties": {
                                    "awsConfig": {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "required": [
                                    "awsConfig"
                                  ]
                                },
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "DynamoDbCatalogConnection",
                                  "description": "Iceberg DynamoDB Catalog configuration.",
                                  "type": "object",
                                  "javaType": "org.openmetadata.schema.services.connections.database.iceberg.DynamoDbCatalogConnection",
                                  "properties": {
                                    "tableName": {
                                      "title": "Table Name",
                                      "description": "DynamoDB table name.",
                                      "type": "string",
                                      "default": "iceberg"
                                    },
                                    "awsConfig": {
                                      "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "required": [
                                    "tableName",
                                    "awsConfig"
                                  ]
                                }
                              ]
                            },
                            "databaseName": {
                              "title": "Database Name",
                              "description": "Custom Database Name for your Iceberg Service. If not set it will be 'default'.",
                              "type": "string"
                            },
                            "warehouseLocation": {
                              "title": "Warehouse Location",
                              "description": "Warehouse Location. Used to specify a custom warehouse location if needed.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "name",
                            "connection"
                          ]
                        },
                        "ownershipProperty": {
                          "title": "Ownership Property",
                          "description": "Table property to look for the Owner.",
                          "type": "string",
                          "default": "owner"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "catalog"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "TeradataConnection",
                      "description": "Teradata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.TeradataConnection",
                      "definitions": {
                        "teradataType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Teradata"
                          ],
                          "default": "Teradata"
                        },
                        "teradataScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "teradatasql"
                          ],
                          "default": "teradatasql"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/39/definitions/teradataType",
                          "default": "Teradata"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/39/definitions/teradataScheme",
                          "default": "teradatasql"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Teradata. This user should have privileges to read all the metadata in Teradata.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Teradata.",
                          "type": "string",
                          "format": "password"
                        },
                        "logmech": {
                          "title": "LOGMECH",
                          "description": "Specifies the logon authentication method. Possible values are TD2 (the default), JWT, LDAP, KRB5 for Kerberos, or TDNEGO",
                          "type": "string",
                          "enum": [
                            "TD2",
                            "LDAP",
                            "JWT",
                            "KRB5",
                            "CUSTOM",
                            "TDNEGO"
                          ],
                          "default": "TD2"
                        },
                        "logdata": {
                          "title": "Extra data for the chosen logon authentication method (LOGDATA)",
                          "description": "Specifies additional data needed by a logon mechanism, such as a secure token, Distinguished Name, or a domain/realm name. LOGDATA values are specific to each logon mechanism.",
                          "type": "string"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Teradata service.",
                          "type": "string"
                        },
                        "tmode": {
                          "title": "Transaction mode",
                          "description": "Specifies the transaction mode for the connection",
                          "type": "string",
                          "enum": [
                            "ANSI",
                            "TERA",
                            "DEFAULT"
                          ],
                          "default": "DEFAULT"
                        },
                        "account": {
                          "title": "Teradata Database account",
                          "description": "Specifies an account string to override the default account string defined for the database user. Accounts are used by the database for workload management and resource usage monitoring.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsViewLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/6/properties/supportsViewLineageExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SapErpConnection",
                      "description": "Sap ERP Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SapErpConnection",
                      "definitions": {
                        "sapErpType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SapErp"
                          ],
                          "default": "SapErp"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/40/definitions/sapErpType",
                          "default": "SapErp"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and Port of the SAP ERP instance.",
                          "type": "string",
                          "format": "uri"
                        },
                        "apiKey": {
                          "title": "API Key",
                          "description": "API key to authenticate with the SAP ERP APIs.",
                          "type": "string",
                          "format": "password"
                        },
                        "databaseName": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Optional name to give to the schema in OpenMetadata. If left blank, we will use default as the schema name",
                          "type": "string"
                        },
                        "paginationLimit": {
                          "title": "Pagination Limit",
                          "description": "Pagination limit used while querying the SAP ERP API for fetching the entities",
                          "type": "integer",
                          "default": 10
                        },
                        "verifySSL": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SynapseConnection",
                      "description": "Synapse Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.SynapseConnection",
                      "definitions": {
                        "synapseType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Synapse"
                          ],
                          "default": "Synapse"
                        },
                        "synapseScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "mssql+pyodbc"
                          ],
                          "default": "mssql+pyodbc"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/41/definitions/synapseType",
                          "default": "Synapse"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/41/definitions/synapseScheme",
                          "default": "mssql+pyodbc"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Azure Synapse. This user should have privileges to read all the metadata in Azure Synapse.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Azure Synapse.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Azure Synapse service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database",
                          "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.",
                          "type": "string"
                        },
                        "driver": {
                          "title": "Driver",
                          "description": "ODBC driver version in case of pyodbc connection.",
                          "type": "string",
                          "default": "ODBC Driver 18 for SQL Server"
                        },
                        "authenticationMode": {
                          "title": "Authentication Mode",
                          "description": "This parameter determines the mode of authentication for connecting to Azure Synapse using ODBC. If 'Active Directory Password' is selected, you need to provide the password. If 'Active Directory Integrated' is selected, password is not required as it uses the logged-in user's credentials. This mode is useful for establishing secure and seamless connections with Azure Synapse.",
                          "properties": {
                            "authentication": {
                              "title": "Authentication",
                              "description": "Authentication from Connection String for Azure Synapse.",
                              "type": "string",
                              "enum": [
                                "ActiveDirectoryIntegrated",
                                "ActiveDirectoryPassword"
                              ]
                            },
                            "encrypt": {
                              "title": "Encrypt",
                              "description": "Encrypt from Connection String for Azure Synapse.",
                              "type": "boolean"
                            },
                            "trustServerCertificate": {
                              "title": "Trust Server Certificate",
                              "description": "Trust Server Certificate from Connection String for Azure Synapse.",
                              "type": "boolean"
                            },
                            "connectionTimeout": {
                              "title": "Connection Timeout",
                              "description": "Connection Timeout from Connection String for Azure Synapse.",
                              "type": "integer",
                              "default": 30
                            }
                          }
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Azure Synapse. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsDBTExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDBTExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        },
                        "supportsDatabase": {
                          "title": "Supports Database",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsDatabase"
                        },
                        "supportsUsageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsUsageExtraction"
                        },
                        "supportsLineageExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsLineageExtraction"
                        },
                        "sampleDataStorageConfig": {
                          "title": "Storage Config for Sample Data",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/sampleDataStorageConfig"
                        },
                        "supportsQueryComment": {
                          "title": "Supports Query Comment",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsQueryComment"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "database"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ExasolConnection",
                      "description": "Exasol Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.ExasolConnection",
                      "definitions": {
                        "exasolType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Exasol"
                          ],
                          "default": "Exasol"
                        },
                        "exasolScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "exa+websocket"
                          ],
                          "default": "exa+websocket"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/42/definitions/exasolType",
                          "default": "Exasol"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/42/definitions/exasolScheme",
                          "default": "exa+websocket"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Exasol. This user should have privileges to read all the metadata in Exasol.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Exasol.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the source service.",
                          "type": "string",
                          "default": "127.0.0.1:8563"
                        },
                        "tls": {
                          "title": "SSL/TLS Settings",
                          "description": "Client SSL/TLS settings.",
                          "type": "string",
                          "enum": [
                            "disable-tls",
                            "ignore-certificate",
                            "validate-certificate"
                          ],
                          "default": "validate-certificate"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "password"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CockroachConnection",
                      "description": "Cockroach Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.database.CockroachConnection",
                      "definitions": {
                        "cockroachType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Cockroach"
                          ],
                          "default": "Cockroach"
                        },
                        "cockroachScheme": {
                          "description": "SQLAlchemy driver scheme options.",
                          "type": "string",
                          "enum": [
                            "cockroachdb+psycopg2"
                          ],
                          "default": "cockroachdb+psycopg2"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/43/definitions/cockroachType",
                          "default": "Cockroach"
                        },
                        "scheme": {
                          "title": "Connection Scheme",
                          "description": "SQLAlchemy driver scheme options.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/43/definitions/cockroachScheme",
                          "default": "cockroachdb+psycopg2"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Cockroach. This user should have privileges to read all the metadata in Cockroach.",
                          "type": "string"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15/properties/authType/oneOf/0"
                            }
                          ]
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Cockrooach service.",
                          "type": "string"
                        },
                        "database": {
                          "title": "Database Name",
                          "description": "Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.",
                          "type": "string"
                        },
                        "ingestAllDatabases": {
                          "title": "Ingest All Databases",
                          "description": "Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.",
                          "type": "boolean",
                          "default": false
                        },
                        "databaseSchema": {
                          "title": "Database Schema",
                          "description": "Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.",
                          "type": "string"
                        },
                        "sslConfig": {
                          "title": "SSL",
                          "description": "SSL Configuration details.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "sslMode": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18/properties/sslMode"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        },
                        "supportsProfiler": {
                          "title": "Supports Profiler",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/supportsProfiler"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "username",
                        "database"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.MessagingConnection",
              "description": "Dashboard Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "KafkaConnection",
                      "description": "Kafka Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.KafkaConnection",
                      "definitions": {
                        "kafkaType": {
                          "description": "Kafka service type",
                          "type": "string",
                          "enum": [
                            "Kafka"
                          ],
                          "default": "Kafka"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/definitions/kafkaType",
                          "default": "Kafka"
                        },
                        "bootstrapServers": {
                          "title": "Bootstrap Servers",
                          "description": "Kafka bootstrap servers. add them in comma separated values ex: host1:9092,host2:9092",
                          "type": "string"
                        },
                        "schemaRegistryURL": {
                          "title": "Schema Registry URL",
                          "description": "Confluent Kafka Schema Registry URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "saslUsername": {
                          "title": "SASL Username",
                          "description": "sasl.username consumer config property",
                          "type": "string"
                        },
                        "saslPassword": {
                          "title": "SASL Password",
                          "description": "sasl.password consumer config property",
                          "type": "string",
                          "format": "password"
                        },
                        "securityProtocol": {
                          "title": "Security Protocol",
                          "description": "security.protocol consumer config property",
                          "type": "string",
                          "enum": [
                            "PLAINTEXT",
                            "SASL_PLAINTEXT",
                            "SASL_SSL",
                            "SSL"
                          ],
                          "default": "PLAINTEXT"
                        },
                        "saslMechanism": {
                          "title": "SASL Mechanism",
                          "description": "sasl.mechanism Consumer Config property",
                          "default": "PLAIN",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "javaType": "org.openmetadata.schema.services.connections.messaging.SaslMechanismType",
                          "type": "string",
                          "enum": [
                            "PLAIN",
                            "GSSAPI",
                            "SCRAM-SHA-256",
                            "SCRAM-SHA-512",
                            "OAUTHBEARER"
                          ]
                        },
                        "basicAuthUserInfo": {
                          "title": "Schema Registry Basic Auth User Info",
                          "description": "basic.auth.user.info schema registry config property, Client HTTP credentials in the form of username:password.",
                          "type": "string",
                          "format": "password"
                        },
                        "consumerConfig": {
                          "title": "Consumer Config",
                          "description": "Confluent Kafka Consumer Config. From https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "schemaRegistryConfig": {
                          "title": "Schema Registry Config",
                          "description": "Confluent Kafka Schema Registry Config. From https://docs.confluent.io/5.5.1/clients/confluent-kafka-python/index.html#confluent_kafka.schema_registry.SchemaRegistryClient",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "schemaRegistryTopicSuffixName": {
                          "title": "Schema Registry Topic Suffix Name",
                          "description": "Schema Registry Topic Suffix Name. The suffix to be appended to the topic name to get topic schema from registry.",
                          "type": "string",
                          "default": "-value"
                        },
                        "consumerConfigSSL": {
                          "title": "Consumer Config SSL",
                          "description": "Consumer Config SSL Config. Configuration for enabling SSL for the Consumer Config connection.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "schemaRegistrySSL": {
                          "title": "Schema Registry SSL",
                          "description": "Schema Registry SSL Config. Configuration for enabling SSL for the Schema Registry connection.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "topicFilterPattern": {
                          "description": "Regex to only fetch topics that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Topic Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "bootstrapServers"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "RedpandaConnection",
                      "description": "Redpanda Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.RedpandaConnection",
                      "definitions": {
                        "RedpandaType": {
                          "description": "Redpanda service type",
                          "type": "string",
                          "enum": [
                            "Redpanda"
                          ],
                          "default": "Redpanda"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/1/definitions/RedpandaType",
                          "default": "Redpanda"
                        },
                        "bootstrapServers": {
                          "title": "Bootstrap Servers",
                          "description": "Redpanda bootstrap servers. add them in comma separated values ex: host1:9092,host2:9092",
                          "type": "string"
                        },
                        "schemaRegistryURL": {
                          "title": "Schema Registry URL",
                          "description": "Confluent Redpanda Schema Registry URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "saslUsername": {
                          "title": "SASL Username",
                          "description": "sasl.username consumer config property",
                          "type": "string"
                        },
                        "saslPassword": {
                          "title": "SASL Password",
                          "description": "sasl.password consumer config property",
                          "type": "string",
                          "format": "password"
                        },
                        "securityProtocol": {
                          "title": "Security Protocol",
                          "description": "security.protocol consumer config property",
                          "type": "string",
                          "enum": [
                            "PLAINTEXT",
                            "SASL_PLAINTEXT",
                            "SASL_SSL",
                            "SSL"
                          ],
                          "default": "PLAINTEXT"
                        },
                        "saslMechanism": {
                          "title": "SASL Mechanism",
                          "description": "sasl.mechanism Consumer Config property",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/saslMechanism",
                          "default": "PLAIN"
                        },
                        "basicAuthUserInfo": {
                          "title": "Schema Registry Basic Auth User Info",
                          "description": "basic.auth.user.info schema registry config property, Client HTTP credentials in the form of username:password.",
                          "type": "string",
                          "format": "password"
                        },
                        "consumerConfig": {
                          "title": "Consumer Config",
                          "description": "Confluent Redpanda Consumer Config",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "schemaRegistryConfig": {
                          "title": "Schema Registry Config",
                          "description": "Confluent Redpanda Schema Registry Config.",
                          "type": "object",
                          "default": {},
                          "additionalProperties": true
                        },
                        "topicFilterPattern": {
                          "description": "Regex to only fetch topics that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Topic Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "bootstrapServers"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "KinesisConnection",
                      "description": "Kinesis Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.KinesisConnection",
                      "definitions": {
                        "kinesisType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Kinesis"
                          ],
                          "default": "Kinesis"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/2/definitions/kinesisType",
                          "default": "Kinesis"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "topicFilterPattern": {
                          "description": "Regex to only fetch topics that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Topic Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomMessagingConnection",
                      "description": "Custom Messaging Service Connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.messaging.CustomMessagingConnection",
                      "definitions": {
                        "customMessagingType": {
                          "title": "Service Type",
                          "description": "Custom messaging service type",
                          "type": "string",
                          "enum": [
                            "CustomMessaging"
                          ],
                          "default": "CustomMessaging"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom messaging service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/3/definitions/customMessagingType",
                          "default": "CustomMessaging"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "topicFilterPattern": {
                          "description": "Regex to only fetch topics that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Topic Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.entity.services.MetadataConnection",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "description": "Metadata Service Connection.",
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AmundsenConnection",
                      "description": "Amundsen Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AmundsenConnection",
                      "definitions": {
                        "amundsenType": {
                          "description": "Amundsen service type",
                          "type": "string",
                          "enum": [
                            "Amundsen"
                          ],
                          "default": "Amundsen"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/definitions/amundsenType",
                          "default": "Amundsen"
                        },
                        "username": {
                          "description": "username to connect to the Amundsen Neo4j Connection.",
                          "type": "string"
                        },
                        "password": {
                          "description": "password to connect to the Amundsen Neo4j Connection.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host and Port",
                          "description": "Host and port of the Amundsen Neo4j Connection. This expect a URI format like: bolt://localhost:7687.",
                          "type": "string",
                          "format": "uri"
                        },
                        "maxConnectionLifeTime": {
                          "description": "Maximum connection lifetime for the Amundsen Neo4j Connection.",
                          "type": "integer",
                          "default": 50
                        },
                        "validateSSL": {
                          "description": "Enable SSL validation for the Amundsen Neo4j Connection.",
                          "type": "boolean",
                          "default": false
                        },
                        "encrypted": {
                          "description": "Enable encryption for the Amundsen Neo4j Connection.",
                          "type": "boolean",
                          "default": false
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "description": "Supports Metadata Extraction.",
                          "type": "boolean",
                          "default": true
                        }
                      },
                      "required": [
                        "username",
                        "password",
                        "hostPort"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MetadataESConnection",
                      "description": "Metadata to ElasticSearch Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.MetadataESConnection",
                      "definitions": {
                        "metadataESType": {
                          "description": "Metadata to Elastic Search type",
                          "type": "string",
                          "enum": [
                            "MetadataES"
                          ],
                          "default": "MetadataES"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/1/definitions/metadataESType",
                          "default": "MetadataES"
                        },
                        "entities": {
                          "title": "Entities",
                          "description": "List of entities that you need to reindex",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": [
                            "table",
                            "topic",
                            "dashboard",
                            "pipeline",
                            "mlmodel",
                            "user",
                            "team",
                            "glossaryTerm",
                            "tag",
                            "entityReportData",
                            "webAnalyticEntityViewReportData",
                            "webAnalyticUserActivityReportData",
                            "container",
                            "query"
                          ],
                          "uniqueItems": true
                        },
                        "recreateIndex": {
                          "title": "Recreate Indexes",
                          "type": "boolean",
                          "default": true
                        },
                        "runMode": {
                          "description": "This schema publisher run modes.",
                          "type": "string",
                          "enum": [
                            "stream",
                            "batch"
                          ]
                        },
                        "searchIndexMappingLanguage": {
                          "description": "Recreate Indexes with updated Language",
                          "javaType": "org.openmetadata.schema.type.IndexMappingLanguage",
                          "type": "string",
                          "enum": [
                            "EN",
                            "JP",
                            "ZH"
                          ],
                          "default": "EN"
                        },
                        "batchSize": {
                          "title": "Batch Size",
                          "description": "Maximum number of events sent in a batch (Default 100).",
                          "type": "integer",
                          "default": 100
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OpenMetadataConnection",
                      "description": "OpenMetadata Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.OpenMetadataConnection",
                      "definitions": {
                        "openmetadataType": {
                          "description": "OpenMetadata service type",
                          "type": "string",
                          "enum": [
                            "OpenMetadata"
                          ],
                          "default": "OpenMetadata"
                        },
                        "extraHeaders": {
                          "description": "Additional headers to be sent to the API endpoint.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "authProvider": {
                          "javaType": "org.openmetadata.schema.services.connections.metadata.AuthProvider",
                          "description": "OpenMetadata Server Authentication Provider. Make sure configure same auth providers as the one configured on OpenMetadata server.",
                          "type": "string",
                          "enum": [
                            "basic",
                            "azure",
                            "google",
                            "okta",
                            "auth0",
                            "aws-cognito",
                            "custom-oidc",
                            "ldap",
                            "saml",
                            "openmetadata"
                          ],
                          "default": "basic"
                        }
                      },
                      "properties": {
                        "clusterName": {
                          "description": "Cluster name to differentiate OpenMetadata Server instance",
                          "type": "string",
                          "default": "openmetadata"
                        },
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/2/definitions/openmetadataType",
                          "default": "OpenMetadata"
                        },
                        "hostPort": {
                          "description": "OpenMetadata Server Config. Must include API end point ex: http://localhost:8585/api",
                          "type": "string",
                          "default": "http://localhost:8585/api"
                        },
                        "authProvider": {
                          "description": "OpenMetadata Server Authentication Provider.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/2/definitions/authProvider"
                        },
                        "verifySSL": {
                          "description": "Flag to verify SSL Certificate for OpenMetadata Server.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "description": "SSL Configuration for OpenMetadata Server",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "securityConfig": {
                          "mask": true,
                          "description": "OpenMetadata Client security configuration.",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "title": "openMetadataJWTClientConfig",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.client.OpenMetadataJWTClientConfig",
                          "properties": {
                            "jwtToken": {
                              "description": "OpenMetadata generated JWT token.",
                              "type": "string",
                              "format": "password"
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "jwtToken"
                          ]
                        },
                        "secretsManagerProvider": {
                          "description": "Secrets Manager Provider for OpenMetadata Server.",
                          "default": "db",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "title": "Secrets Manager Provider",
                          "type": "string",
                          "javaType": "org.openmetadata.schema.security.secrets.SecretsManagerProvider",
                          "enum": [
                            "db",
                            "managed-aws",
                            "aws",
                            "managed-aws-ssm",
                            "aws-ssm",
                            "managed-azure-kv",
                            "azure-kv",
                            "in-memory",
                            "gcp"
                          ],
                          "additionalProperties": false
                        },
                        "secretsManagerLoader": {
                          "description": "Secrets Manager Loader for the Pipeline Service Client.",
                          "default": "noop",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "title": "Secrets Manager Client Loader",
                          "type": "string",
                          "javaType": "org.openmetadata.schema.security.secrets.SecretsManagerClientLoader",
                          "enum": [
                            "noop",
                            "airflow",
                            "env"
                          ],
                          "additionalProperties": false
                        },
                        "apiVersion": {
                          "description": "OpenMetadata server API version to use.",
                          "type": "string",
                          "default": "v1"
                        },
                        "includeTopics": {
                          "description": "Include Topics for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeTables": {
                          "description": "Include Tables for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeDashboards": {
                          "description": "Include Dashboards for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includePipelines": {
                          "description": "Include Pipelines for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeMlModels": {
                          "description": "Include MlModels for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeUsers": {
                          "description": "Include Users for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeTeams": {
                          "description": "Include Teams for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeGlossaryTerms": {
                          "description": "Include Glossary Terms for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includeTags": {
                          "description": "Include Tags for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includePolicy": {
                          "description": "Include Tags for Policy",
                          "type": "boolean",
                          "default": true
                        },
                        "includeMessagingServices": {
                          "description": "Include Messaging Services for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "enableVersionValidation": {
                          "description": "Validate Openmetadata Server & Client Version.",
                          "type": "boolean",
                          "default": true
                        },
                        "includeDatabaseServices": {
                          "description": "Include Database Services for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "includePipelineServices": {
                          "description": "Include Pipeline Services for Indexing",
                          "type": "boolean",
                          "default": true
                        },
                        "limitRecords": {
                          "description": "Limit the number of records for Indexing.",
                          "type": "integer",
                          "default": 1000
                        },
                        "forceEntityOverwriting": {
                          "description": "Force the overwriting of any entity during the ingestion.",
                          "type": "boolean",
                          "default": false
                        },
                        "storeServiceConnection": {
                          "description": "If set to true, when creating a service during the ingestion we will store its Service Connection. Otherwise, the ingestion will create a bare service without connection details.",
                          "type": "boolean",
                          "default": true
                        },
                        "elasticsSearch": {
                          "description": "Configuration for Sink Component in the OpenMetadata Ingestion Framework.",
                          "type": "object",
                          "properties": {
                            "type": {
                              "description": "Type of sink component ex: metadata",
                              "type": "string"
                            },
                            "config": {
                              "description": "key/value pairs to pass to workflow component.",
                              "type": "object",
                              "additionalProperties": {
                                ".{1,}": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "additionalProperties": false,
                          "required": [
                            "type"
                          ]
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsDataInsightExtraction": {
                          "description": "Flag to enable Data Insight Extraction",
                          "type": "boolean",
                          "default": true
                        },
                        "supportsElasticSearchReindexingExtraction": {
                          "description": "Flag to enable ElasticSearch Reindexing Extraction",
                          "type": "boolean",
                          "default": true
                        },
                        "extraHeaders": {
                          "title": "Extra Headers",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/2/definitions/extraHeaders"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AtlasConnection",
                      "description": "Atlas Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AtlasConnection",
                      "definitions": {
                        "atlasType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Atlas"
                          ],
                          "default": "Atlas"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/definitions/atlasType",
                          "default": "Atlas"
                        },
                        "username": {
                          "description": "username to connect  to the Atlas. This user should have privileges to read all the metadata in Atlas.",
                          "type": "string"
                        },
                        "password": {
                          "description": "password to connect  to the Atlas.",
                          "type": "string",
                          "format": "password"
                        },
                        "hostPort": {
                          "description": "Host and port of the Atlas service.",
                          "title": "Host and Port",
                          "type": "string",
                          "format": "uri",
                          "expose": true
                        },
                        "databaseServiceName": {
                          "description": "service type of the data source.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "messagingServiceName": {
                          "description": "service type of the messaging source",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "entity_type": {
                          "title": "Entity Type",
                          "description": "Name of the Entity Type available in Atlas.",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
                          "description": "Additional connection options to build the URL that can be sent to service during the connection.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "connectionArguments": {
                          "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
                          "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
                          "type": "object",
                          "additionalProperties": {
                            ".{1,}": {
                              "type": "string"
                            }
                          }
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "required": [
                        "entity_type",
                        "username",
                        "password"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AlationConnection",
                      "description": "Alation Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AlationConnection",
                      "definitions": {
                        "alationType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Alation"
                          ],
                          "default": "Alation"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/4/definitions/alationType",
                          "default": "Alation"
                        },
                        "hostPort": {
                          "description": "Host and port of the Alation service.",
                          "title": "Host and Port",
                          "type": "string",
                          "format": "uri",
                          "expose": true
                        },
                        "authType": {
                          "mask": true,
                          "title": "Authentication type for Alation",
                          "description": "Types of methods used to authenticate to the alation instance",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/authType/oneOf/0"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "ApiAccessTokenAuth",
                              "description": "API Access Token Auth Credentials",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.ApiAccessTokenAuth",
                              "properties": {
                                "accessToken": {
                                  "title": "Access Token",
                                  "description": "Access Token for the API",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "required": [
                                "accessToken"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "connection": {
                          "title": "Alation Database Connection",
                          "description": "Choose between mysql and postgres connection for alation database",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15"
                            },
                            {
                              "title": "None",
                              "type": "object",
                              "additionalProperties": false
                            }
                          ]
                        },
                        "projectName": {
                          "title": "Project Name",
                          "description": "Project name to create the refreshToken. Can be anything",
                          "type": "string",
                          "default": "AlationAPI"
                        },
                        "paginationLimit": {
                          "title": "Pagination Limit",
                          "description": "Pagination limit used for Alation APIs pagination",
                          "type": "integer",
                          "default": 10
                        },
                        "includeUndeployedDatasources": {
                          "title": "Include Undeployed Datasources",
                          "description": "Specifies if undeployed datasources should be included while ingesting.",
                          "type": "boolean",
                          "default": false
                        },
                        "includeHiddenDatasources": {
                          "title": "Include Hidden Datasources",
                          "description": "Specifies if hidden datasources should be included while ingesting.",
                          "type": "boolean",
                          "default": false
                        },
                        "ingestDatasources": {
                          "title": "Ingest Datasources",
                          "description": "Specifies if Datasources are to be ingested while running the ingestion job.",
                          "type": "boolean",
                          "default": true
                        },
                        "ingestUsersAndGroups": {
                          "title": "Ingest Users and Groups",
                          "description": "Specifies if Users and Groups are to be ingested while running the ingestion job.",
                          "type": "boolean",
                          "default": true
                        },
                        "ingestDomains": {
                          "title": "Ingest Domains",
                          "description": "Specifies if Domains are to be ingested while running the ingestion job.",
                          "type": "boolean",
                          "default": true
                        },
                        "ingestKnowledgeArticles": {
                          "title": "Ingest Knowledge Articles",
                          "description": "Specifies if Knowledge Articles are to be ingested while running the ingestion job.",
                          "type": "boolean",
                          "default": true
                        },
                        "ingestDashboards": {
                          "title": "Ingest Dashboards",
                          "description": "Specifies if Dashboards are to be ingested while running the ingestion job.",
                          "type": "boolean",
                          "default": true
                        },
                        "alationTagClassificationName": {
                          "title": "Alation Tags Classification Name",
                          "description": "Custom OpenMetadata Classification name for alation tags.",
                          "type": "string",
                          "default": "alationTags"
                        },
                        "connectionOptions": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "required": [
                        "hostPort",
                        "authType"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AlationSinkConnection",
                      "description": "Alation Sink Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.metadata.AlationSinkConnection",
                      "definitions": {
                        "alationSinkType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "AlationSink"
                          ],
                          "default": "AlationSink"
                        },
                        "datasourceLinks": {
                          "title": "Datasource Links",
                          "description": "Add the links between alation datasources and OpenMetadata Database services",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/5/definitions/alationSinkType",
                          "default": "AlationSink"
                        },
                        "hostPort": {
                          "description": "Host and port of the Alation service.",
                          "title": "Host and Port",
                          "type": "string",
                          "format": "uri",
                          "expose": true
                        },
                        "authType": {
                          "mask": true,
                          "title": "Authentication type for Alation",
                          "description": "Types of methods used to authenticate to the alation instance",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/authType/oneOf/0"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/4/properties/authType/oneOf/1"
                            }
                          ]
                        },
                        "projectName": {
                          "title": "Project Name",
                          "description": "Project name to create the refreshToken. Can be anything",
                          "type": "string",
                          "default": "AlationAPI"
                        },
                        "paginationLimit": {
                          "title": "Pagination Limit",
                          "description": "Pagination limit used for Alation APIs pagination",
                          "type": "integer",
                          "default": 10
                        },
                        "datasourceLinks": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/5/definitions/datasourceLinks"
                        },
                        "verifySSL": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "connectionOptions": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "schemaFilterPattern": {
                          "title": "Default Schema Filter Pattern",
                          "description": "Regex to only include/exclude schemas that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "tableFilterPattern": {
                          "title": "Default Table Filter Pattern",
                          "description": "Regex to only include/exclude tables that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "databaseFilterPattern": {
                          "title": "Default Database Filter Pattern",
                          "description": "Regex to only include/exclude databases that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "required": [
                        "hostPort",
                        "authType"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.PipelineConnection",
              "description": "Pipeline Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AirflowConnection",
                      "description": "Airflow Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.AirflowConnection",
                      "definitions": {
                        "AirflowType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Airflow"
                          ],
                          "default": "Airflow"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/0/definitions/AirflowType",
                          "default": "Airflow"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri"
                        },
                        "numberOfStatus": {
                          "description": "Pipeline Service Number Of Status",
                          "type": "integer",
                          "default": "10"
                        },
                        "connection": {
                          "title": "Metadata Database Connection",
                          "description": "Underlying database connection. See https://airflow.apache.org/docs/apache-airflow/stable/howto/set-up-database.html for supported backends.",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "BackendConnection",
                              "description": "Lineage Backend Connection Config",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.services.connections.pipeline.BackendConnection",
                              "definitions": {
                                "BackendType": {
                                  "description": "Service type.",
                                  "type": "string",
                                  "enum": [
                                    "Backend"
                                  ],
                                  "default": "Backend"
                                }
                              },
                              "properties": {
                                "type": {
                                  "title": "Service Type",
                                  "description": "Service Type",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/0/properties/connection/oneOf/0/definitions/BackendType",
                                  "default": "Backend"
                                },
                                "pipelineFilterPattern": {
                                  "description": "Regex exclude pipelines.",
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                                  "title": "Default Pipeline Filter Pattern"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/15"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/18"
                            },
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/16"
                            }
                          ]
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "connection"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GluePipelineConnection",
                      "description": "Glue Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.GluePipelineConnection",
                      "definitions": {
                        "glueType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "GluePipeline"
                          ],
                          "default": "GluePipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/1/definitions/glueType",
                          "default": "GluePipeline"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "AirbyteConnection",
                      "description": "Airbyte Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.AirbyteConnection",
                      "definitions": {
                        "AirbyteType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Airbyte"
                          ],
                          "default": "Airbyte"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/2/definitions/AirbyteType",
                          "default": "Airbyte"
                        },
                        "hostPort": {
                          "expose": true,
                          "description": "Pipeline Service Management/UI URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "username": {
                          "title": "Username",
                          "description": "Username to connect to Airbyte.",
                          "type": "string"
                        },
                        "password": {
                          "title": "Password",
                          "description": "Password to connect to Airbyte.",
                          "type": "string",
                          "format": "password"
                        },
                        "apiVersion": {
                          "title": "API Version",
                          "description": "Airbyte API version.",
                          "type": "string",
                          "default": "api/v1"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "FivetranConnection",
                      "description": "Fivetran Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.FivetranConnection",
                      "definitions": {
                        "FivetranType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Fivetran"
                          ],
                          "default": "Fivetran"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/3/definitions/FivetranType",
                          "default": "Fivetran"
                        },
                        "apiKey": {
                          "title": "Fivetran API Key",
                          "description": "Fivetran API Secret.",
                          "type": "string"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://api.fivetran.com"
                        },
                        "apiSecret": {
                          "title": "Fivetran API Secret",
                          "description": "Fivetran API Secret.",
                          "type": "string",
                          "format": "password"
                        },
                        "limit": {
                          "title": "Fivetran API Limit",
                          "description": "Fivetran API Limit For Pagination.",
                          "type": "integer",
                          "default": 1000
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "apiKey",
                        "apiSecret"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "FlinkConnection",
                      "description": "Flink Metadata Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.FlinkConnection",
                      "definitions": {
                        "FlinkType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Flink"
                          ],
                          "default": "Flink"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/4/definitions/FlinkType",
                          "default": "Flink"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri",
                          "default": "https://api.flink.com"
                        },
                        "verifySSL": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DagsterConnection",
                      "description": "Dagster Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DagsterConnection",
                      "definitions": {
                        "DagsterType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Dagster"
                          ],
                          "default": "Dagster"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/5/definitions/DagsterType",
                          "default": "Dagster"
                        },
                        "host": {
                          "title": "Host",
                          "description": "URL to the Dagster instance",
                          "type": "string",
                          "format": "uri"
                        },
                        "token": {
                          "title": "Token",
                          "description": "To Connect to Dagster Cloud",
                          "type": "string",
                          "format": "password"
                        },
                        "timeout": {
                          "title": "Time Out",
                          "description": "Connection Time Limit Between OM and Dagster Graphql API in second",
                          "type": "integer",
                          "default": "1000"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "host"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "NifiConnection",
                      "description": "Nifi Metadata Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.NifiConnection",
                      "definitions": {
                        "NifiType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Nifi"
                          ],
                          "default": "Nifi"
                        },
                        "basicAuthentication": {
                          "title": "Username/Password Authentication",
                          "description": "username/password auth",
                          "javaType": "org.openmetadata.schema.services.connections.pipeline.NifiBasicAuth",
                          "type": "object",
                          "properties": {
                            "username": {
                              "title": "Username",
                              "description": "Nifi user to authenticate to the API.",
                              "type": "string"
                            },
                            "password": {
                              "title": "Password",
                              "description": "Nifi password to authenticate to the API.",
                              "type": "string",
                              "format": "password"
                            },
                            "verifySSL": {
                              "title": "Verify SSL",
                              "description": "Boolean marking if we need to verify the SSL certs for Nifi. False by default.",
                              "type": "boolean",
                              "default": false
                            }
                          },
                          "additionalProperties": false
                        },
                        "clientCertificateAuthentication": {
                          "title": "Client Certificate Authentication",
                          "description": "client certificate auth",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.services.connections.pipeline.NifiClientAuth",
                          "properties": {
                            "certificateAuthorityPath": {
                              "title": "Certificat Authority Path",
                              "description": "Path to the root CA certificate",
                              "type": "string"
                            },
                            "clientCertificatePath": {
                              "title": "Client Certificat",
                              "description": "Path to the client certificate",
                              "type": "string"
                            },
                            "clientkeyPath": {
                              "title": "Client Key",
                              "description": "Path to the client key",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/6/definitions/NifiType",
                          "default": "Nifi"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "Pipeline Service Management/UI URI.",
                          "type": "string",
                          "format": "uri"
                        },
                        "nifiConfig": {
                          "title": "Nifi Credentials Configuration",
                          "description": "We support username/password or client certificate authentication",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Nifi Basic Auth",
                              "description": "Configuration for connecting to Nifi Basic Auth.",
                              "javaType": "org.openmetadata.schema.services.connections.pipeline.nifi.BasicAuth",
                              "type": "object",
                              "properties": {
                                "username": {
                                  "title": "Username",
                                  "description": "Nifi user to authenticate to the API.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Nifi password to authenticate to the API.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "verifySSL": {
                                  "title": "Verify SSL",
                                  "description": "Boolean marking if we need to verify the SSL certs for Nifi. False by default.",
                                  "type": "boolean",
                                  "default": false
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Nifi Client Certificate Auth",
                              "description": "Configuration for connecting to Nifi Client Certificate Auth.",
                              "javaType": "org.openmetadata.schema.services.connections.pipeline.nifi.ClientCertificateAuth",
                              "type": "object",
                              "properties": {
                                "certificateAuthorityPath": {
                                  "title": "Certificat Authority Path",
                                  "description": "Path to the root CA certificate",
                                  "type": "string"
                                },
                                "clientCertificatePath": {
                                  "title": "Client Certificat",
                                  "description": "Path to the client certificate",
                                  "type": "string"
                                },
                                "clientkeyPath": {
                                  "title": "Client Key",
                                  "description": "Path to the client key",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "nifiConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DomoPipelineConnection",
                      "description": "Domo Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DomoPipelineConnection",
                      "definitions": {
                        "DomoPipelineType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DomoPipeline"
                          ],
                          "default": "DomoPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/7/definitions/DomoPipelineType",
                          "default": "DomoPipeline"
                        },
                        "clientId": {
                          "title": "Client ID",
                          "description": "Client ID for DOMO",
                          "type": "string"
                        },
                        "secretToken": {
                          "title": "Secret Token",
                          "description": "Secret token to connect to DOMO",
                          "type": "string",
                          "format": "password"
                        },
                        "accessToken": {
                          "title": "Access Token",
                          "description": "Access token to connect to DOMO",
                          "type": "string"
                        },
                        "apiHost": {
                          "expose": true,
                          "title": "API Host",
                          "description": "API Host to connect to DOMO instance",
                          "default": "api.domo.com",
                          "type": "string",
                          "format": "string"
                        },
                        "instanceDomain": {
                          "title": "Instance Domain",
                          "description": "URL of your Domo instance, e.g., https://openmetadata.domo.com",
                          "type": "string",
                          "format": "uri"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "clientId",
                        "secretToken",
                        "instanceDomain"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomPipelineConnection",
                      "description": "Custom Pipeline Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.CustomPipelineConnection",
                      "definitions": {
                        "customPipelineType": {
                          "title": "Service Type",
                          "description": "Custom pipeline service type",
                          "type": "string",
                          "enum": [
                            "CustomPipeline"
                          ],
                          "default": "CustomPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom pipeline service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/8/definitions/customPipelineType",
                          "default": "CustomPipeline"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DatabricksPipelineConnection",
                      "description": "Databricks Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DatabricksPipelineConnection",
                      "definitions": {
                        "databricksType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DatabricksPipeline"
                          ],
                          "default": "DatabricksPipeline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/9/definitions/databricksType",
                          "default": "DatabricksPipeline"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Databricks service.",
                          "type": "string"
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to Databricks.",
                          "type": "string",
                          "format": "password"
                        },
                        "httpPath": {
                          "title": "Http Path",
                          "description": "Databricks compute resources URL.",
                          "type": "string"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SplineConnection",
                      "description": "Spline Metadata Database Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.SplineConnection",
                      "definitions": {
                        "SplineType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Spline"
                          ],
                          "default": "Spline"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/10/definitions/SplineType",
                          "default": "Spline"
                        },
                        "hostPort": {
                          "title": "Spline REST Server Host & Port",
                          "expose": true,
                          "description": "Spline REST Server Host & Port.",
                          "type": "string",
                          "format": "uri"
                        },
                        "uiHostPort": {
                          "title": "Spline UI Host & Port",
                          "expose": true,
                          "description": "Spline UI Host & Port.",
                          "type": "string",
                          "format": "uri"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SparkConnection",
                      "description": "Spark Metadata Pipeline Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.SparkConnection",
                      "definitions": {
                        "SparkType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Spark"
                          ],
                          "default": "Spark"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/11/definitions/SparkType",
                          "default": "Spark"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OpenLineageConnection",
                      "description": "OpenLineage Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.OpenLineageConnection",
                      "definitions": {
                        "OpenLineageType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "OpenLineage"
                          ],
                          "default": "OpenLineage"
                        }
                      },
                      "properties": {
                        "type": {
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/12/definitions/OpenLineageType",
                          "default": "OpenLineage"
                        },
                        "brokersUrl": {
                          "title": "Kafka brokers list",
                          "description": "service type of the messaging source",
                          "type": "string"
                        },
                        "topicName": {
                          "title": "Topic Name",
                          "description": "topic from where Open lineage events will be pulled ",
                          "type": "string"
                        },
                        "consumerGroupName": {
                          "title": "Consumer Group",
                          "description": "consumer group name ",
                          "type": "string"
                        },
                        "consumerOffsets": {
                          "title": "Initial consumer offsets",
                          "description": "initial Kafka consumer offset",
                          "default": "earliest",
                          "type": "string",
                          "enum": [
                            "earliest",
                            "latest"
                          ],
                          "javaEnums": [
                            {
                              "name": "earliest"
                            },
                            {
                              "name": "latest"
                            }
                          ]
                        },
                        "poolTimeout": {
                          "title": "Single pool call timeout",
                          "description": "max allowed wait time",
                          "type": "number",
                          "default": 1
                        },
                        "sessionTimeout": {
                          "title": "Broker inactive session timeout",
                          "description": "max allowed inactivity time",
                          "type": "integer",
                          "default": 30
                        },
                        "securityProtocol": {
                          "title": "Kafka security protocol",
                          "description": "Kafka security protocol config",
                          "default": "PLAINTEXT",
                          "type": "string",
                          "enum": [
                            "PLAINTEXT",
                            "SSL",
                            "SASL_SSL"
                          ],
                          "javaEnums": [
                            {
                              "name": "PLAINTEXT"
                            },
                            {
                              "name": "SSL"
                            },
                            {
                              "name": "SASL_SSL"
                            }
                          ]
                        },
                        "sslConfig": {
                          "title": "SSL",
                          "description": "SSL Configuration details.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                        },
                        "saslConfig": {
                          "title": "SASL",
                          "description": "SASL Configuration details.",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.sasl.SASLClientConfig",
                          "additionalProperties": false,
                          "properties": {
                            "saslMechanism": {
                              "title": "SASL Mechanism",
                              "description": "SASL security mechanism",
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/3/properties/config/oneOf/0/properties/saslMechanism",
                              "default": "PLAIN"
                            },
                            "saslUsername": {
                              "title": "SASL Username",
                              "description": "The SASL authentication username.",
                              "type": "string"
                            },
                            "saslPassword": {
                              "title": "SASL Password",
                              "description": "The SASL authentication password.",
                              "type": "string"
                            }
                          }
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "KafkaConnectConnection",
                      "description": "KafkaConnect Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.KafkaConnectConnection",
                      "definitions": {
                        "KafkaConnectType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "KafkaConnect"
                          ],
                          "default": "KafkaConnect"
                        },
                        "basicAuthentication": {
                          "title": "Username/Password Authentication",
                          "description": "username/password auth",
                          "type": "object",
                          "properties": {
                            "username": {
                              "title": "Username",
                              "description": "KafkaConnect user to authenticate to the API.",
                              "type": "string"
                            },
                            "password": {
                              "title": "Password",
                              "description": "KafkaConnect password to authenticate to the API.",
                              "type": "string",
                              "format": "password"
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/13/definitions/KafkaConnectType",
                          "default": "KafkaConnect"
                        },
                        "hostPort": {
                          "expose": true,
                          "title": "Host And Port",
                          "description": "KafkaConnect Service Management/UI URI.",
                          "type": "string",
                          "format": "uri"
                        },
                        "KafkaConnectConfig": {
                          "title": "KafkaConnect Credentials Configuration",
                          "description": "We support username/password or No Authentication",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/13/definitions/basicAuthentication"
                        },
                        "verifySSL": {
                          "title": "Verify SSL",
                          "description": "Boolean marking if we need to verify the SSL certs for KafkaConnect REST API. True by default.",
                          "type": "boolean",
                          "default": true
                        },
                        "messagingServiceName": {
                          "title": "Kafka Service Name",
                          "description": "Name of the Kafka Messaging Service associated with this KafkaConnect Pipeline Service. e.g. local_kafka",
                          "type": "string"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DBTCloudConnection",
                      "description": "DBTCloud Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DBTCloudConnection",
                      "definitions": {
                        "DBTCloudType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DBTCloud"
                          ],
                          "default": "DBTCloud"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/14/definitions/DBTCloudType",
                          "default": "DBTCloud"
                        },
                        "host": {
                          "expose": true,
                          "title": "Host",
                          "description": "DBT cloud Access URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "discoveryAPI": {
                          "expose": true,
                          "title": "Discovery API URL",
                          "description": "DBT cloud Metadata API URL.",
                          "type": "string",
                          "format": "uri"
                        },
                        "accountId": {
                          "title": "Account Id",
                          "description": "ID of your DBT cloud account",
                          "type": "string"
                        },
                        "jobIds": {
                          "title": "Job Ids",
                          "description": "List of IDs of your DBT cloud jobs seperated by comma `,`",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "projectIds": {
                          "title": "Project Ids",
                          "description": "List of IDs of your DBT cloud projects seperated by comma `,`",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "token": {
                          "title": "Token",
                          "description": "Generated Token to connect to DBTCloud.",
                          "type": "string",
                          "format": "password"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "host",
                        "discoveryAPI",
                        "accountId",
                        "token"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MatillionConnection",
                      "description": "Matillion Connection",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.MatillionConnection",
                      "definitions": {
                        "matillionType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Matillion"
                          ],
                          "default": "Matillion"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/15/definitions/matillionType",
                          "default": "Matillion"
                        },
                        "connection": {
                          "title": "Matillion Connection",
                          "description": "Matillion Auth Configuration",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Matillion ETL Auth Config",
                              "description": "Matillion ETL Auth Config.",
                              "javaType": "org.openmetadata.schema.services.connections.pipeline.matillion.MatillionETLAuth",
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "MatillionETL"
                                  ],
                                  "default": "MatillionETL"
                                },
                                "hostPort": {
                                  "type": "string",
                                  "title": "Host",
                                  "description": "Matillion Host",
                                  "default": "localhost"
                                },
                                "username": {
                                  "title": "Username",
                                  "description": "Username to connect to the Matillion. This user should have privileges to read all the metadata in Matillion.",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Password to connect to the Matillion.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "sslConfig": {
                                  "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/sslConfig"
                                }
                              },
                              "required": [
                                "hostPort",
                                "username",
                                "password"
                              ],
                              "additionalProperties": false
                            }
                          ]
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "DataFactoryConnection",
                      "description": "Azure Data Factory Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.DataFactoryConnection",
                      "definitions": {
                        "DataFactoryType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "DataFactory"
                          ],
                          "default": "DataFactory"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/16/definitions/DataFactoryType",
                          "default": "DataFactory"
                        },
                        "subscription_id": {
                          "title": "Subscription ID",
                          "description": "The azure subscription identifier.",
                          "type": "string"
                        },
                        "resource_group_name": {
                          "title": "Resource Group name",
                          "description": "The name of your resource group the data factory is associated with.",
                          "type": "string"
                        },
                        "factory_name": {
                          "title": "Azure Data Factory name",
                          "description": "The name of your azure data factory.",
                          "type": "string"
                        },
                        "run_filter_days": {
                          "title": "Azure Data Factory pipeline runs day filter",
                          "description": "Number of days in the past to filter pipeline runs.",
                          "type": "integer",
                          "default": 7
                        },
                        "configSource": {
                          "title": "Azure Data Factory Configuration",
                          "description": "Available sources to fetch metadata.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/properties/credentials"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "subscription_id",
                        "resource_group_name",
                        "factory_name"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "StitchConnection",
                      "description": "Stitch Connection",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.pipeline.StitchConnection",
                      "definitions": {
                        "stitchType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Stitch"
                          ],
                          "default": "Stitch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/5/properties/config/oneOf/17/definitions/stitchType",
                          "default": "Stitch"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the Stitch API host",
                          "type": "string",
                          "default": "https://api.stitchdata.com/v4"
                        },
                        "token": {
                          "title": "JWT Token",
                          "description": "Token to connect to Stitch api doc",
                          "type": "string",
                          "format": "password"
                        },
                        "pipelineFilterPattern": {
                          "description": "Regex exclude pipelines.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Pipeline Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "hostPort",
                        "token"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.MlModelConnection",
              "description": "MlModel Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "MlflowConnection",
                      "description": "MlFlow Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.MlflowConnection",
                      "definitions": {
                        "mlflowType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Mlflow"
                          ],
                          "default": "Mlflow"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/6/properties/config/oneOf/0/definitions/mlflowType",
                          "default": "Mlflow"
                        },
                        "trackingUri": {
                          "title": "Tracking URI",
                          "description": "Mlflow Experiment tracking URI. E.g., http://localhost:5000",
                          "type": "string"
                        },
                        "registryUri": {
                          "title": "Registry URI",
                          "description": "Mlflow Model registry backend. E.g., mysql+pymysql://mlflow:password@localhost:3307/experiments",
                          "type": "string"
                        },
                        "mlModelFilterPattern": {
                          "description": "Regex to only fetch MlModels with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default ML Model Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "trackingUri",
                        "registryUri"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SklearnConnection",
                      "description": "Sklearn Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.SklearnConnection",
                      "definitions": {
                        "sklearnType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "Sklearn"
                          ],
                          "default": "Sklearn"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/6/properties/config/oneOf/1/definitions/sklearnType",
                          "default": "Sklearn"
                        },
                        "mlModelFilterPattern": {
                          "description": "Regex to only fetch MlModels with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default ML Model Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomMlModelConnection",
                      "description": "Custom MlModel Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.CustomMlModelConnection",
                      "definitions": {
                        "customMlModelType": {
                          "title": "Service Type",
                          "description": "Custom Ml model service type",
                          "type": "string",
                          "enum": [
                            "CustomMlModel"
                          ],
                          "default": "CustomMlModel"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom Ml model service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/6/properties/config/oneOf/2/definitions/customMlModelType",
                          "default": "CustomMlModel"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "mlModelFilterPattern": {
                          "description": "Regex to only fetch MlModels with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default ML Model Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "SageMakerConnection",
                      "description": "SageMaker Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.SageMakerConnection",
                      "definitions": {
                        "sageMakerType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "SageMaker"
                          ],
                          "default": "SageMaker"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/6/properties/config/oneOf/3/definitions/sageMakerType",
                          "default": "SageMaker"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "mlModelFilterPattern": {
                          "description": "Regex to only fetch MlModels with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default ML Model Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "VertexAIConnection",
                      "description": "Google VertexAI Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.mlmodel.VertexAIConnection",
                      "definitions": {
                        "vertexAIType": {
                          "description": "Service type.",
                          "type": "string",
                          "enum": [
                            "VertexAI"
                          ],
                          "default": "VertexAI"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/6/properties/config/oneOf/4/definitions/vertexAIType",
                          "default": "VertexAI"
                        },
                        "credentials": {
                          "title": "GCP Credentials",
                          "description": "GCP Credentials",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials"
                        },
                        "location": {
                          "title": "Project location",
                          "description": "location/region of google cloud project",
                          "type": "string"
                        },
                        "mlModelFilterPattern": {
                          "description": "Regex to only fetch MlModels with names matching the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default ML Model Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials",
                        "location"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.StorageConnection",
              "description": "Storage Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "S3 Connection",
                      "description": "S3 Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.S3Connection",
                      "definitions": {
                        "s3Type": {
                          "description": "S3 service type",
                          "type": "string",
                          "enum": [
                            "S3"
                          ],
                          "default": "S3"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/0/definitions/s3Type",
                          "default": "S3"
                        },
                        "awsConfig": {
                          "title": "AWS Credentials Configuration",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/properties/authType/oneOf/1"
                        },
                        "bucketNames": {
                          "title": "Bucket Names",
                          "description": "Bucket Names of the data source.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": null
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "containerFilterPattern": {
                          "description": "Regex to only fetch containers that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Storage container Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsConfig"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ADLS Connection",
                      "description": "ADLS Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.ADLSConnection",
                      "definitions": {
                        "azureType": {
                          "description": "ADLS service type",
                          "type": "string",
                          "enum": [
                            "ADLS"
                          ],
                          "default": "ADLS"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/1/definitions/azureType",
                          "default": "ADLS"
                        },
                        "credentials": {
                          "title": "Azure Credentials",
                          "description": "Azure Credentials",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "type": "object",
                          "javaType": "org.openmetadata.schema.security.credentials.AzureCredentials",
                          "properties": {
                            "clientId": {
                              "title": "Client ID",
                              "description": "Your Service Principal App ID (Client ID)",
                              "type": "string"
                            },
                            "clientSecret": {
                              "title": "Client Secret",
                              "description": "Your Service Principal Password (Client Secret)",
                              "type": "string",
                              "format": "password"
                            },
                            "tenantId": {
                              "title": "Tenant ID",
                              "description": "Tenant ID of your Azure Subscription",
                              "type": "string"
                            },
                            "accountName": {
                              "title": "Storage Account Name",
                              "description": "Account Name of your storage account",
                              "type": "string"
                            },
                            "vaultName": {
                              "title": "Key Vault Name",
                              "description": "Key Vault Name",
                              "type": "string"
                            },
                            "scopes": {
                              "title": "Scopes",
                              "description": "Scopes to get access token, for e.g. api://6dfX33ab-XXXX-49df-XXXX-3459eX817d3e/.default",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "containerFilterPattern": {
                          "description": "Regex to only fetch containers that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Storage container Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "GCS Connection",
                      "description": "GCS Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.GCSConnection",
                      "definitions": {
                        "gcsType": {
                          "description": "Gcs service type",
                          "type": "string",
                          "enum": [
                            "GCS"
                          ],
                          "default": "GCS"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Service Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/2/definitions/gcsType",
                          "default": "GCS"
                        },
                        "credentials": {
                          "title": "GCP Credentials",
                          "description": "GCP Credentials",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/2/properties/config/oneOf/0/properties/credentials"
                        },
                        "bucketNames": {
                          "title": "Bucket Names",
                          "description": "Bucket Names of the data source.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "default": null
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "containerFilterPattern": {
                          "description": "Regex to only fetch containers that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Storage container Filter Pattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "credentials"
                      ]
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomStorageConnection",
                      "description": "Custom Storage Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.storage.CustomStorageConnection",
                      "definitions": {
                        "customStorageType": {
                          "title": "Service Type",
                          "description": "Custom storage service type",
                          "type": "string",
                          "enum": [
                            "CustomStorage"
                          ],
                          "default": "CustomStorage"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom storage service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/7/properties/config/oneOf/3/definitions/customStorageType",
                          "default": "CustomStorage"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "containerFilterPattern": {
                          "description": "Regex to only fetch containers that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern",
                          "title": "Default Storage container Filter Pattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "javaType": "org.openmetadata.schema.type.SearchConnection",
              "description": "search Connection.",
              "javaInterfaces": [
                "org.openmetadata.schema.ServiceConnectionEntityInterface"
              ],
              "properties": {
                "config": {
                  "mask": true,
                  "oneOf": [
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "ElasticSearch Connection",
                      "description": "ElasticSearch Connection.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.ElasticSearchConnection",
                      "definitions": {
                        "elasticSearchType": {
                          "description": "ElasticSearch service type",
                          "type": "string",
                          "enum": [
                            "ElasticSearch"
                          ],
                          "default": "ElasticSearch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "ElasticSearch Type",
                          "description": "ElasticSearch Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/0/definitions/elasticSearchType",
                          "default": "ElasticSearch"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the ElasticSearch service.",
                          "type": "string",
                          "format": "uri"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "Basic Authentication",
                              "description": "Basic Auth Configuration for ElasticSearch",
                              "javaType": "org.openmetadata.schema.services.connections.search.elasticSearch.ESBasicAuth",
                              "type": "object",
                              "properties": {
                                "username": {
                                  "title": "Username",
                                  "description": "Elastic Search Username for Login",
                                  "type": "string"
                                },
                                "password": {
                                  "title": "Password",
                                  "description": "Elastic Search Password for Login",
                                  "type": "string",
                                  "format": "password"
                                }
                              },
                              "additionalProperties": false
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "API Key Authentication",
                              "description": "API Key Authentication for ElasticSearch",
                              "javaType": "org.openmetadata.schema.services.connections.search.elasticSearch.ESAPIAuth",
                              "type": "object",
                              "properties": {
                                "apiKey": {
                                  "title": "API Key",
                                  "description": "Elastic Search API Key for API Authentication",
                                  "type": "string",
                                  "format": "password"
                                },
                                "apiKeyId": {
                                  "title": "API Key ID",
                                  "description": "Elastic Search API Key ID for API Authentication",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        },
                        "sslConfig": {
                          "title": "SSL Config",
                          "$schema": "http://json-schema.org/draft-07/schema#",
                          "description": "SSL Config",
                          "javaType": "org.openmetadata.schema.services.common.SSLConfig",
                          "type": "object",
                          "properties": {
                            "certificates": {
                              "type": "object",
                              "title": "SSL Certificates",
                              "description": "SSL Certificates",
                              "oneOf": [
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "SSL Certificates By Path",
                                  "description": "SSL Certificates By Path",
                                  "javaType": "org.openmetadata.schema.services.common.SSLCertPaths",
                                  "type": "object",
                                  "properties": {
                                    "caCertPath": {
                                      "title": "CA Certificate Path",
                                      "description": "CA Certificate Path",
                                      "type": "string"
                                    },
                                    "clientCertPath": {
                                      "title": "Client Certificate Path",
                                      "description": "Client Certificate Path",
                                      "type": "string"
                                    },
                                    "privateKeyPath": {
                                      "title": "Private Key Path",
                                      "description": "Private Key Path",
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                {
                                  "$schema": "http://json-schema.org/draft-07/schema#",
                                  "title": "SSL Certificates By Values",
                                  "description": "SSL Certificates By Values",
                                  "javaType": "org.openmetadata.schema.services.common.SSLCertValues",
                                  "type": "object",
                                  "properties": {
                                    "caCertValue": {
                                      "title": "CA Certificate Value",
                                      "description": "CA Certificate Value",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "clientCertValue": {
                                      "title": "Client Certificate Value",
                                      "description": "Client Certificate Value",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "privateKeyValue": {
                                      "title": "Private Key Value",
                                      "description": "Private Key Value",
                                      "type": "string",
                                      "format": "password"
                                    },
                                    "stagingDir": {
                                      "title": "Staging Directory Path",
                                      "description": "Staging Directory Path",
                                      "type": "string",
                                      "default": "/tmp/openmetadata-certs"
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              ]
                            }
                          }
                        },
                        "connectionTimeoutSecs": {
                          "title": "Connection Timeout in Seconds",
                          "description": "Connection Timeout in Seconds",
                          "type": "integer",
                          "default": 30
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "searchIndexFilterPattern": {
                          "title": "Default Search Index Filter Pattern",
                          "description": "Regex to only fetch search indexes that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "OpenSearchConnection",
                      "description": "OpenSearch Connection Config",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.OpenSearchConnection",
                      "definitions": {
                        "openSearchType": {
                          "description": "OpenSearch service type",
                          "type": "string",
                          "enum": [
                            "OpenSearch"
                          ],
                          "default": "OpenSearch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "OpenSearch Type",
                          "description": "OpenSearch Type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/1/definitions/openSearchType",
                          "default": "OpenSearch"
                        },
                        "hostPort": {
                          "title": "Host and Port",
                          "description": "Host and port of the OpenSearch service.",
                          "type": "string",
                          "format": "uri"
                        },
                        "authType": {
                          "title": "Auth Configuration Type",
                          "description": "Choose Auth Config Type.",
                          "oneOf": [
                            {
                              "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/0/properties/authType/oneOf/0"
                            },
                            {
                              "$schema": "http://json-schema.org/draft-07/schema#",
                              "title": "AWSCredentials",
                              "description": "AWS credentials configs.",
                              "type": "object",
                              "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                              "properties": {
                                "awsAccessKeyId": {
                                  "title": "AWS Access Key ID",
                                  "description": "AWS Access key ID.",
                                  "type": "string"
                                },
                                "awsSecretAccessKey": {
                                  "title": "AWS Secret Access Key",
                                  "description": "AWS Secret Access Key.",
                                  "type": "string",
                                  "format": "password"
                                },
                                "awsRegion": {
                                  "title": "AWS Region",
                                  "description": "AWS Region",
                                  "type": "string"
                                },
                                "awsSessionToken": {
                                  "title": "AWS Session Token",
                                  "description": "AWS Session Token.",
                                  "type": "string"
                                },
                                "endPointURL": {
                                  "title": "Endpoint URL",
                                  "description": "EndPoint URL for the AWS",
                                  "type": "string",
                                  "format": "uri"
                                },
                                "profileName": {
                                  "title": "Profile Name",
                                  "description": "The name of a profile to use with the boto session.",
                                  "type": "string"
                                },
                                "assumeRoleArn": {
                                  "title": "Role Arn for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                                  "type": "string"
                                },
                                "assumeRoleSessionName": {
                                  "title": "Role Session Name for Assume Role",
                                  "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                                  "type": "string",
                                  "default": "OpenMetadataSession"
                                },
                                "assumeRoleSourceIdentity": {
                                  "title": "Source Identity for Assume Role",
                                  "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "required": [
                                "awsRegion"
                              ]
                            }
                          ]
                        },
                        "verifySSL": {
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/6/properties/verifySSL",
                          "default": "no-ssl"
                        },
                        "sslConfig": {
                          "title": "SSL Config",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/0/properties/sslConfig"
                        },
                        "connectionTimeoutSecs": {
                          "title": "Connection Timeout in Seconds",
                          "description": "Connection Timeout in Seconds",
                          "type": "integer",
                          "default": 30
                        },
                        "connectionArguments": {
                          "title": "Connection Arguments",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionArguments"
                        },
                        "searchIndexFilterPattern": {
                          "title": "Default Search Index Filter Pattern",
                          "description": "Regex to only fetch search indexes that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        },
                        "supportsMetadataExtraction": {
                          "title": "Supports Metadata Extraction",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/0/properties/supportsMetadataExtraction"
                        }
                      },
                      "additionalProperties": false
                    },
                    {
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "title": "CustomSearchConnection",
                      "description": "Custom Search Service connection to build a source that is not supported by OpenMetadata yet.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.services.connections.search.CustomSearchConnection",
                      "definitions": {
                        "customSearchType": {
                          "title": "Service Type",
                          "description": "Custom search service type",
                          "type": "string",
                          "enum": [
                            "CustomSearch"
                          ],
                          "default": "CustomSearch"
                        }
                      },
                      "properties": {
                        "type": {
                          "title": "Service Type",
                          "description": "Custom search service type",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/8/properties/config/oneOf/2/definitions/customSearchType",
                          "default": "CustomSearch"
                        },
                        "sourcePythonClass": {
                          "title": "Source Python Class Name",
                          "description": "Source Python Class Name to instantiated by the ingestion workflow",
                          "type": "string"
                        },
                        "connectionOptions": {
                          "title": "Connection Options",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/4/properties/config/oneOf/3/properties/connectionOptions"
                        },
                        "searchIndexFilterPattern": {
                          "title": "Default Search Index Filter Pattern",
                          "description": "Regex to only fetch search indexes that matches the pattern.",
                          "$ref": "#/definitions/serviceConnections/properties/serviceConnection/oneOf/1/properties/config/oneOf/0/properties/chartFilterPattern"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "serviceName",
        "serviceConnection"
      ]
    }
  },
  "properties": {
    "type": {
      "description": "Pipeline type",
      "$ref": "#/definitions/testSuiteConfigType",
      "default": "TestSuite"
    },
    "entityFullyQualifiedName": {
      "description": "Fully qualified name of the entity to be tested, if we're working with a basic suite.",
      "type": "string",
      "minLength": 1,
      "maxLength": 3072
    },
    "serviceConnections": {
      "description": "Service connections to be used for the logical test suite.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/serviceConnections"
      },
      "default": null
    },
    "profileSample": {
      "description": "Percentage of data or no. of rows we want to execute the profiler and tests on",
      "type": "number",
      "default": null,
      "title": "Profile Sample"
    },
    "profileSampleType": {
      "title": "Profile Sample Type",
      "description": "Type of Profile Sample (percentage or rows)",
      "type": "string",
      "enum": [
        "PERCENTAGE",
        "ROWS"
      ],
      "default": "PERCENTAGE"
    },
    "samplingMethodType": {
      "title": "Sampling Method Type",
      "description": "Type of Sampling Method (BERNOULLI or SYSTEM)",
      "type": "string",
      "enum": [
        "BERNOULLI",
        "SYSTEM"
      ]
    },
    "testCases": {
      "description": "List of test cases to be executed on the entity. If null, all test cases will be executed.",
      "type": "array",
      "items": {
        "description": "Name that identifies a test definition and test case.",
        "type": "string",
        "minLength": 1,
        "pattern": "^((?!::).)*$"
      },
      "default": null
    }
  },
  "required": [
    "type"
  ],
  "additionalProperties": false
}